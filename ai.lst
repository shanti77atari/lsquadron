mads 2.0.7
Source: ai.asm
     1 				//AI przeciwników
     2 = 0001			ai_test = 1
     3
     4 				.if .DEF ai_test
     5
     6 = 00D0			bit3		equ $d0
     7 = 00D1			bit2		equ $d1
     8 = 00D2			bit0		equ $d2
     9 = 00F1			pom0		equ $f1
    10 = 00F2			pom			equ $f2
    11
    12
    13 = 0008			MAX_SPRITES	equ 8
    14
    15
    16 								org $2000
    17 								
    18 				sprite_X			org *+MAX_SPRITES
    19 				sprite_Y			org *+MAX_SPRITES	
    20 				sprite_shape		org *+MAX_SPRITES	
    21 				sprite_wybuch		org *+MAX_SPRITES		
    22 								
    23 				run		
    24 FFFF> 2020-2054> A9 08				lda #%1000
    25 2022 85 D0					sta bit3
    26 2024 4A						lsr
    27 2025 85 D1					sta bit2
    28 2027 4A						lsr
    29 2028 4A						lsr
    30 2029 85 D2					sta bit0
    31 							
    32 							
    33 202B A9 01 8D 01 20				mva #1 sprite_X+1
    34 2030 8D 09 20					sta sprite_Y+1
    35 2033 A9 00 8D 56 20				mva #0 AI.sprite_DX+1
    36 2038 8D 5E 20					sta AI.sprite_DY+1
    37 203B 8D 19 20					sta sprite_wybuch+1
    38 							
    39 							
    40 203E A2 01					ldx #1		;enemy1
    41 2040 A9 00					lda #0		;path0
    42 2042 20 16 22					jsr AI.add_path
    43 							
    44 2045 20 E9 22		@			jsr AI.play
    45 2048 AE 01 20					ldx sprite_X+1
    46 204B AC 09 20					ldy sprite_Y+1
    47 204E AD 56 20					lda AI.sprite_DX+1
    48 2051 02						dta 2
    49 							
    50 2052 4C 45 20					jmp @-
    51 							
    52 02E0-02E1> 20 20					run run
    53 				.endif
    54 								
    55 2055			.local AI
    56 2055			sprite_DX		org *+MAX_SPRITES
    57 205D			sprite_DY		org *+MAX_SPRITES
    58
    59 2065			sprite_ruch		org *+MAX_SPRITES		;typ ruchu 0=brak, 1=prosta, 2=łuk
    60 206D			sprite_ruch_X	org *+MAX_SPRITES		;prędkość liniowa X
    61 2075			sprite_ruch_DX	org *+MAX_SPRITES	
    62 207D			sprite_ruch_Y	org *+MAX_SPRITES		;predkość liniowa Y
    63 2085			sprite_ruch_DY	org *+MAX_SPRITES
    64 208D			sprite_path_nr	org *+MAX_SPRITES		;nr wybranej ścieżki
    65 2095			sprite_path_licznik_rozkazow org *+MAX_SPRITES	;ile pozostało do wykonia zwykłych ruchów (prosta,łuk)
    66 209D			sprite_path_licznik	org *+MAX_SPRITES	;pozycja w ściezce, max=255
    67
    68 				;ruch po prostej
    69 20A5			sprite_ruch_fazaObrotu	org *+MAX_SPRITES		;jaki ksztalt wybrac
    70 20AD			sprite_ruch_ileRamek		org *+MAX_SPRITES		;ile ramek ma trwać ruch
    71 				;ruch po łuku
    72 20B5			sprite_ruch_zegar		org *+MAX_SPRITES		;zapamietaj kierunek ruchu =1 jak zegar,=255 odwrotnie
    73 20BD			sprite_ruch_NRluku		org *+MAX_SPRITES		;zapamietaj numer łuku		0=+x,+y
    74 = 20AD			sprite_ruch_licznik	equ sprite_ruch_ileRamek		;nr w tabeli
    75 = 20A5			sprite_ruch_end		equ sprite_ruch_fazaObrotu	;kiedy koniec łuku
    76 20C5			sprite_ruch_adm		org *+MAX_SPRITES				;mlodszy adres tablicy dla łuku
    77 20CD			sprite_ruch_ads		org *+MAX_SPRITES				;starszy adres tablicy dla łuku
    78
    79
    80 20D5-2419> FA		path_ad_m		dta b(<path0)			;mlodszy bajt adresu ścieżki
    81 20D6 21			path_ad_s		dta b(>path0)			;starszy bajt adresu ścieżki 
    82
    83 20D7 D9 20		luk_tab		dta a(luk0)			;tablica adresow tablic dla łuków
    84
    85 20D9 20 00 02 00 10 00 + luk0	.he 20,00,02,00,10,00,10,00,10,00,10,02,10,00,00,12,00,10,02,00,12,00,00,02,10,02,00,02,00,02,00,02,00
    86
    87
    88 20FA			tab_DX							;tablica przesuniecia X w ruchu prostym 128b
    89 20FA 00 00 00 00 00 00 + 	.he 0,0,0,0,0,0,0,0													;kierunek 0
    90 2102				MX _S0*P1,_S1*P1,_S2*P1,_S3*P1,_S4*P1,_S5*P1,_S6*P1,_S7*P1
Macro: AI.MX [Source: ai.asm]
     1 = 0061				a_0 = _S0*P1 / 100000
     2 = 0061				a2_0 = <a_0
     3 = 0000				a1_0 = >a_0	
     7 = 0000					znak_0 = 0 
     9 = 0000				w1_0 = a1_0 & 3
    10 = 0060				w2_0 = a2_0 & 248
    11 2102 60				dta b(w2_0 + znak_0 + w1_0)
    13 = 0061				a_1 = _S1*P1 / 100000
    14 = 0061				a2_1 = <a_1
    15 = 0000				a1_1 = >a_1	
    19 = 0000					znak_1 = 0 
    21 = 0000				w1_1 = a1_1 & 3
    22 = 0060				w2_1 = a2_1 & 248
    23 2103 60				dta b(w2_1 + znak_1 + w1_1)
    25 = 0061				a_2 = _S2*P1 / 100000
    26 = 0061				a2_2 = <a_2
    27 = 0000				a1_2 = >a_2
    31 = 0000					znak_2 = 0 
    33 = 0000				w1_2 = a1_2 & 3
    34 = 0060				w2_2 = a2_2 & 248
    35 2104 60				dta b(w2_2 + znak_2 + w1_2)
    37 = 0061				a_3 = _S3*P1 / 100000
    38 = 0061				a2_3 = <a_3
    39 = 0000				a1_3 = >a_3
    43 = 0000					znak_3 = 0 
    45 = 0000				w1_3 = a1_3 & 3
    46 = 0060				w2_3 = a2_3 & 248
    47 2105 60				dta b(w2_3 + znak_3 + w1_3)
    49 = 0061				a_4 = _S4*P1 / 100000
    50 = 0061				a2_4 = <a_4
    51 = 0000				a1_4 = >a_4
    55 = 0000					znak_4 = 0 
    57 = 0000				w1_4 = a1_4 & 3
    58 = 0060				w2_4 = a2_4 & 248
    59 2106 60				dta b(w2_4 + znak_4 + w1_4)
    61 = 0061				a_5 = _S5*P1 / 100000
    62 = 0061				a2_5 = <a_5
    63 = 0000				a1_5 = >a_5
    67 = 0000					znak_5 = 0 
    69 = 0000				w1_5 = a1_5 & 3
    70 = 0060				w2_5 = a2_5 & 248
    71 2107 60				dta b(w2_5 + znak_5 + w1_5)
    73 = 0061				a_6 = _S6*P1 / 100000
    74 = 0061				a2_6 = <a_6
    75 = 0000				a1_6 = >a_6
    79 = 0000					znak_6 = 0 
    81 = 0000				w1_6 = a1_6 & 3
    82 = 0060				w2_6 = a2_6 & 248
    83 2108 60				dta b(w2_6 + znak_6 + w1_6)
    85 = 0061				a_7 = _S7*P1 / 100000
    86 = 0061				a2_7 = <a_7
    87 = 0000				a1_7 = >a_7
    91 = 0000					znak_7 = 0 
    93 = 0000				w1_7 = a1_7 & 3
    94 = 0060				w2_7 = a2_7 & 248
    95 2109 60				dta b(w2_7 + znak_7 + w1_7)
Source: ai.asm
    91 210A				MX _S0*P3,_S1*P3,_S2*P3,_S3*P3,_S4*P3,_S5*P3,_S6*P3,_S7*P3
Macro: AI.MX [Source: ai.asm]
     1 = 00B5				a_0 = _S0*P3 / 100000
     2 = 00B5				a2_0 = <a_0
     3 = 0000				a1_0 = >a_0	
     7 = 0000					znak_0 = 0 
     9 = 0000				w1_0 = a1_0 & 3
    10 = 00B0				w2_0 = a2_0 & 248
    11 210A B0				dta b(w2_0 + znak_0 + w1_0)
    13 = 00B5				a_1 = _S1*P3 / 100000
    14 = 00B5				a2_1 = <a_1
    15 = 0000				a1_1 = >a_1	
    19 = 0000					znak_1 = 0 
    21 = 0000				w1_1 = a1_1 & 3
    22 = 00B0				w2_1 = a2_1 & 248
    23 210B B0				dta b(w2_1 + znak_1 + w1_1)
    25 = 00B5				a_2 = _S2*P3 / 100000
    26 = 00B5				a2_2 = <a_2
    27 = 0000				a1_2 = >a_2
    31 = 0000					znak_2 = 0 
    33 = 0000				w1_2 = a1_2 & 3
    34 = 00B0				w2_2 = a2_2 & 248
    35 210C B0				dta b(w2_2 + znak_2 + w1_2)
    37 = 00B5				a_3 = _S3*P3 / 100000
    38 = 00B5				a2_3 = <a_3
    39 = 0000				a1_3 = >a_3
    43 = 0000					znak_3 = 0 
    45 = 0000				w1_3 = a1_3 & 3
    46 = 00B0				w2_3 = a2_3 & 248
    47 210D B0				dta b(w2_3 + znak_3 + w1_3)
    49 = 00B5				a_4 = _S4*P3 / 100000
    50 = 00B5				a2_4 = <a_4
    51 = 0000				a1_4 = >a_4
    55 = 0000					znak_4 = 0 
    57 = 0000				w1_4 = a1_4 & 3
    58 = 00B0				w2_4 = a2_4 & 248
    59 210E B0				dta b(w2_4 + znak_4 + w1_4)
    61 = 00B5				a_5 = _S5*P3 / 100000
    62 = 00B5				a2_5 = <a_5
    63 = 0000				a1_5 = >a_5
    67 = 0000					znak_5 = 0 
    69 = 0000				w1_5 = a1_5 & 3
    70 = 00B0				w2_5 = a2_5 & 248
    71 210F B0				dta b(w2_5 + znak_5 + w1_5)
    73 = 00B5				a_6 = _S6*P3 / 100000
    74 = 00B5				a2_6 = <a_6
    75 = 0000				a1_6 = >a_6
    79 = 0000					znak_6 = 0 
    81 = 0000				w1_6 = a1_6 & 3
    82 = 00B0				w2_6 = a2_6 & 248
    83 2110 B0				dta b(w2_6 + znak_6 + w1_6)
    85 = 00B5				a_7 = _S7*P3 / 100000
    86 = 00B5				a2_7 = <a_7
    87 = 0000				a1_7 = >a_7
    91 = 0000					znak_7 = 0 
    93 = 0000				w1_7 = a1_7 & 3
    94 = 00B0				w2_7 = a2_7 & 248
    95 2111 B0				dta b(w2_7 + znak_7 + w1_7)
Source: ai.asm
    92 2112				MX _S0*P2,_S1*P2,_S2*P2,_S3*P2,_S4*P2,_S5*P2,_S6*P2,_S7*P2
Macro: AI.MX [Source: ai.asm]
     1 = 00EC				a_0 = _S0*P2 / 100000
     2 = 00EC				a2_0 = <a_0
     3 = 0000				a1_0 = >a_0	
     7 = 0000					znak_0 = 0 
     9 = 0000				w1_0 = a1_0 & 3
    10 = 00E8				w2_0 = a2_0 & 248
    11 2112 E8				dta b(w2_0 + znak_0 + w1_0)
    13 = 00EC				a_1 = _S1*P2 / 100000
    14 = 00EC				a2_1 = <a_1
    15 = 0000				a1_1 = >a_1	
    19 = 0000					znak_1 = 0 
    21 = 0000				w1_1 = a1_1 & 3
    22 = 00E8				w2_1 = a2_1 & 248
    23 2113 E8				dta b(w2_1 + znak_1 + w1_1)
    25 = 00EC				a_2 = _S2*P2 / 100000
    26 = 00EC				a2_2 = <a_2
    27 = 0000				a1_2 = >a_2
    31 = 0000					znak_2 = 0 
    33 = 0000				w1_2 = a1_2 & 3
    34 = 00E8				w2_2 = a2_2 & 248
    35 2114 E8				dta b(w2_2 + znak_2 + w1_2)
    37 = 00EC				a_3 = _S3*P2 / 100000
    38 = 00EC				a2_3 = <a_3
    39 = 0000				a1_3 = >a_3
    43 = 0000					znak_3 = 0 
    45 = 0000				w1_3 = a1_3 & 3
    46 = 00E8				w2_3 = a2_3 & 248
    47 2115 E8				dta b(w2_3 + znak_3 + w1_3)
    49 = 00EC				a_4 = _S4*P2 / 100000
    50 = 00EC				a2_4 = <a_4
    51 = 0000				a1_4 = >a_4
    55 = 0000					znak_4 = 0 
    57 = 0000				w1_4 = a1_4 & 3
    58 = 00E8				w2_4 = a2_4 & 248
    59 2116 E8				dta b(w2_4 + znak_4 + w1_4)
    61 = 00EC				a_5 = _S5*P2 / 100000
    62 = 00EC				a2_5 = <a_5
    63 = 0000				a1_5 = >a_5
    67 = 0000					znak_5 = 0 
    69 = 0000				w1_5 = a1_5 & 3
    70 = 00E8				w2_5 = a2_5 & 248
    71 2117 E8				dta b(w2_5 + znak_5 + w1_5)
    73 = 00EC				a_6 = _S6*P2 / 100000
    74 = 00EC				a2_6 = <a_6
    75 = 0000				a1_6 = >a_6
    79 = 0000					znak_6 = 0 
    81 = 0000				w1_6 = a1_6 & 3
    82 = 00E8				w2_6 = a2_6 & 248
    83 2118 E8				dta b(w2_6 + znak_6 + w1_6)
    85 = 00EC				a_7 = _S7*P2 / 100000
    86 = 00EC				a2_7 = <a_7
    87 = 0000				a1_7 = >a_7
    91 = 0000					znak_7 = 0 
    93 = 0000				w1_7 = a1_7 & 3
    94 = 00E8				w2_7 = a2_7 & 248
    95 2119 E8				dta b(w2_7 + znak_7 + w1_7)
Source: ai.asm
    93 211A				MX _S0*P0,_S1*P0,_S2*P0,_S3*P0,_S4*P0,_S5*P0,_S6*P0,_S7*P0			;kierunek 4
Macro: AI.MX [Source: ai.asm]
     1 = 0100				a_0 = _S0*P0 / 100000
     2 = 0000				a2_0 = <a_0
     3 = 0001				a1_0 = >a_0	
     7 = 0000					znak_0 = 0 
     9 = 0001				w1_0 = a1_0 & 3
    10 = 0000				w2_0 = a2_0 & 248
    11 211A 01				dta b(w2_0 + znak_0 + w1_0)
    13 = 0100				a_1 = _S1*P0 / 100000
    14 = 0000				a2_1 = <a_1
    15 = 0001				a1_1 = >a_1	
    19 = 0000					znak_1 = 0 
    21 = 0001				w1_1 = a1_1 & 3
    22 = 0000				w2_1 = a2_1 & 248
    23 211B 01				dta b(w2_1 + znak_1 + w1_1)
    25 = 0100				a_2 = _S2*P0 / 100000
    26 = 0000				a2_2 = <a_2
    27 = 0001				a1_2 = >a_2
    31 = 0000					znak_2 = 0 
    33 = 0001				w1_2 = a1_2 & 3
    34 = 0000				w2_2 = a2_2 & 248
    35 211C 01				dta b(w2_2 + znak_2 + w1_2)
    37 = 0100				a_3 = _S3*P0 / 100000
    38 = 0000				a2_3 = <a_3
    39 = 0001				a1_3 = >a_3
    43 = 0000					znak_3 = 0 
    45 = 0001				w1_3 = a1_3 & 3
    46 = 0000				w2_3 = a2_3 & 248
    47 211D 01				dta b(w2_3 + znak_3 + w1_3)
    49 = 0100				a_4 = _S4*P0 / 100000
    50 = 0000				a2_4 = <a_4
    51 = 0001				a1_4 = >a_4
    55 = 0000					znak_4 = 0 
    57 = 0001				w1_4 = a1_4 & 3
    58 = 0000				w2_4 = a2_4 & 248
    59 211E 01				dta b(w2_4 + znak_4 + w1_4)
    61 = 0100				a_5 = _S5*P0 / 100000
    62 = 0000				a2_5 = <a_5
    63 = 0001				a1_5 = >a_5
    67 = 0000					znak_5 = 0 
    69 = 0001				w1_5 = a1_5 & 3
    70 = 0000				w2_5 = a2_5 & 248
    71 211F 01				dta b(w2_5 + znak_5 + w1_5)
    73 = 0100				a_6 = _S6*P0 / 100000
    74 = 0000				a2_6 = <a_6
    75 = 0001				a1_6 = >a_6
    79 = 0000					znak_6 = 0 
    81 = 0001				w1_6 = a1_6 & 3
    82 = 0000				w2_6 = a2_6 & 248
    83 2120 01				dta b(w2_6 + znak_6 + w1_6)
    85 = 0100				a_7 = _S7*P0 / 100000
    86 = 0000				a2_7 = <a_7
    87 = 0001				a1_7 = >a_7
    91 = 0000					znak_7 = 0 
    93 = 0001				w1_7 = a1_7 & 3
    94 = 0000				w2_7 = a2_7 & 248
    95 2121 01				dta b(w2_7 + znak_7 + w1_7)
Source: ai.asm
    94 2122				MX _S0*P2,_S1*P2,_S2*P2,_S3*P2,_S4*P2,_S5*P2,_S6*P2,_S7*P2
Macro: AI.MX [Source: ai.asm]
     1 = 00EC				a_0 = _S0*P2 / 100000
     2 = 00EC				a2_0 = <a_0
     3 = 0000				a1_0 = >a_0	
     7 = 0000					znak_0 = 0 
     9 = 0000				w1_0 = a1_0 & 3
    10 = 00E8				w2_0 = a2_0 & 248
    11 2122 E8				dta b(w2_0 + znak_0 + w1_0)
    13 = 00EC				a_1 = _S1*P2 / 100000
    14 = 00EC				a2_1 = <a_1
    15 = 0000				a1_1 = >a_1	
    19 = 0000					znak_1 = 0 
    21 = 0000				w1_1 = a1_1 & 3
    22 = 00E8				w2_1 = a2_1 & 248
    23 2123 E8				dta b(w2_1 + znak_1 + w1_1)
    25 = 00EC				a_2 = _S2*P2 / 100000
    26 = 00EC				a2_2 = <a_2
    27 = 0000				a1_2 = >a_2
    31 = 0000					znak_2 = 0 
    33 = 0000				w1_2 = a1_2 & 3
    34 = 00E8				w2_2 = a2_2 & 248
    35 2124 E8				dta b(w2_2 + znak_2 + w1_2)
    37 = 00EC				a_3 = _S3*P2 / 100000
    38 = 00EC				a2_3 = <a_3
    39 = 0000				a1_3 = >a_3
    43 = 0000					znak_3 = 0 
    45 = 0000				w1_3 = a1_3 & 3
    46 = 00E8				w2_3 = a2_3 & 248
    47 2125 E8				dta b(w2_3 + znak_3 + w1_3)
    49 = 00EC				a_4 = _S4*P2 / 100000
    50 = 00EC				a2_4 = <a_4
    51 = 0000				a1_4 = >a_4
    55 = 0000					znak_4 = 0 
    57 = 0000				w1_4 = a1_4 & 3
    58 = 00E8				w2_4 = a2_4 & 248
    59 2126 E8				dta b(w2_4 + znak_4 + w1_4)
    61 = 00EC				a_5 = _S5*P2 / 100000
    62 = 00EC				a2_5 = <a_5
    63 = 0000				a1_5 = >a_5
    67 = 0000					znak_5 = 0 
    69 = 0000				w1_5 = a1_5 & 3
    70 = 00E8				w2_5 = a2_5 & 248
    71 2127 E8				dta b(w2_5 + znak_5 + w1_5)
    73 = 00EC				a_6 = _S6*P2 / 100000
    74 = 00EC				a2_6 = <a_6
    75 = 0000				a1_6 = >a_6
    79 = 0000					znak_6 = 0 
    81 = 0000				w1_6 = a1_6 & 3
    82 = 00E8				w2_6 = a2_6 & 248
    83 2128 E8				dta b(w2_6 + znak_6 + w1_6)
    85 = 00EC				a_7 = _S7*P2 / 100000
    86 = 00EC				a2_7 = <a_7
    87 = 0000				a1_7 = >a_7
    91 = 0000					znak_7 = 0 
    93 = 0000				w1_7 = a1_7 & 3
    94 = 00E8				w2_7 = a2_7 & 248
    95 2129 E8				dta b(w2_7 + znak_7 + w1_7)
Source: ai.asm
    95 212A				MX _S0*P3,_S1*P3,_S2*P3,_S3*P3,_S4*P3,_S5*P3,_S6*P3,_S7*P3
Macro: AI.MX [Source: ai.asm]
     1 = 00B5				a_0 = _S0*P3 / 100000
     2 = 00B5				a2_0 = <a_0
     3 = 0000				a1_0 = >a_0	
     7 = 0000					znak_0 = 0 
     9 = 0000				w1_0 = a1_0 & 3
    10 = 00B0				w2_0 = a2_0 & 248
    11 212A B0				dta b(w2_0 + znak_0 + w1_0)
    13 = 00B5				a_1 = _S1*P3 / 100000
    14 = 00B5				a2_1 = <a_1
    15 = 0000				a1_1 = >a_1	
    19 = 0000					znak_1 = 0 
    21 = 0000				w1_1 = a1_1 & 3
    22 = 00B0				w2_1 = a2_1 & 248
    23 212B B0				dta b(w2_1 + znak_1 + w1_1)
    25 = 00B5				a_2 = _S2*P3 / 100000
    26 = 00B5				a2_2 = <a_2
    27 = 0000				a1_2 = >a_2
    31 = 0000					znak_2 = 0 
    33 = 0000				w1_2 = a1_2 & 3
    34 = 00B0				w2_2 = a2_2 & 248
    35 212C B0				dta b(w2_2 + znak_2 + w1_2)
    37 = 00B5				a_3 = _S3*P3 / 100000
    38 = 00B5				a2_3 = <a_3
    39 = 0000				a1_3 = >a_3
    43 = 0000					znak_3 = 0 
    45 = 0000				w1_3 = a1_3 & 3
    46 = 00B0				w2_3 = a2_3 & 248
    47 212D B0				dta b(w2_3 + znak_3 + w1_3)
    49 = 00B5				a_4 = _S4*P3 / 100000
    50 = 00B5				a2_4 = <a_4
    51 = 0000				a1_4 = >a_4
    55 = 0000					znak_4 = 0 
    57 = 0000				w1_4 = a1_4 & 3
    58 = 00B0				w2_4 = a2_4 & 248
    59 212E B0				dta b(w2_4 + znak_4 + w1_4)
    61 = 00B5				a_5 = _S5*P3 / 100000
    62 = 00B5				a2_5 = <a_5
    63 = 0000				a1_5 = >a_5
    67 = 0000					znak_5 = 0 
    69 = 0000				w1_5 = a1_5 & 3
    70 = 00B0				w2_5 = a2_5 & 248
    71 212F B0				dta b(w2_5 + znak_5 + w1_5)
    73 = 00B5				a_6 = _S6*P3 / 100000
    74 = 00B5				a2_6 = <a_6
    75 = 0000				a1_6 = >a_6
    79 = 0000					znak_6 = 0 
    81 = 0000				w1_6 = a1_6 & 3
    82 = 00B0				w2_6 = a2_6 & 248
    83 2130 B0				dta b(w2_6 + znak_6 + w1_6)
    85 = 00B5				a_7 = _S7*P3 / 100000
    86 = 00B5				a2_7 = <a_7
    87 = 0000				a1_7 = >a_7
    91 = 0000					znak_7 = 0 
    93 = 0000				w1_7 = a1_7 & 3
    94 = 00B0				w2_7 = a2_7 & 248
    95 2131 B0				dta b(w2_7 + znak_7 + w1_7)
Source: ai.asm
    96 2132				MX _S0*P1,_S1*P1,_S2*P1,_S3*P1,_S4*P1,_S5*P1,_S6*P1,_S7*P1
Macro: AI.MX [Source: ai.asm]
     1 = 0061				a_0 = _S0*P1 / 100000
     2 = 0061				a2_0 = <a_0
     3 = 0000				a1_0 = >a_0	
     7 = 0000					znak_0 = 0 
     9 = 0000				w1_0 = a1_0 & 3
    10 = 0060				w2_0 = a2_0 & 248
    11 2132 60				dta b(w2_0 + znak_0 + w1_0)
    13 = 0061				a_1 = _S1*P1 / 100000
    14 = 0061				a2_1 = <a_1
    15 = 0000				a1_1 = >a_1	
    19 = 0000					znak_1 = 0 
    21 = 0000				w1_1 = a1_1 & 3
    22 = 0060				w2_1 = a2_1 & 248
    23 2133 60				dta b(w2_1 + znak_1 + w1_1)
    25 = 0061				a_2 = _S2*P1 / 100000
    26 = 0061				a2_2 = <a_2
    27 = 0000				a1_2 = >a_2
    31 = 0000					znak_2 = 0 
    33 = 0000				w1_2 = a1_2 & 3
    34 = 0060				w2_2 = a2_2 & 248
    35 2134 60				dta b(w2_2 + znak_2 + w1_2)
    37 = 0061				a_3 = _S3*P1 / 100000
    38 = 0061				a2_3 = <a_3
    39 = 0000				a1_3 = >a_3
    43 = 0000					znak_3 = 0 
    45 = 0000				w1_3 = a1_3 & 3
    46 = 0060				w2_3 = a2_3 & 248
    47 2135 60				dta b(w2_3 + znak_3 + w1_3)
    49 = 0061				a_4 = _S4*P1 / 100000
    50 = 0061				a2_4 = <a_4
    51 = 0000				a1_4 = >a_4
    55 = 0000					znak_4 = 0 
    57 = 0000				w1_4 = a1_4 & 3
    58 = 0060				w2_4 = a2_4 & 248
    59 2136 60				dta b(w2_4 + znak_4 + w1_4)
    61 = 0061				a_5 = _S5*P1 / 100000
    62 = 0061				a2_5 = <a_5
    63 = 0000				a1_5 = >a_5
    67 = 0000					znak_5 = 0 
    69 = 0000				w1_5 = a1_5 & 3
    70 = 0060				w2_5 = a2_5 & 248
    71 2137 60				dta b(w2_5 + znak_5 + w1_5)
    73 = 0061				a_6 = _S6*P1 / 100000
    74 = 0061				a2_6 = <a_6
    75 = 0000				a1_6 = >a_6
    79 = 0000					znak_6 = 0 
    81 = 0000				w1_6 = a1_6 & 3
    82 = 0060				w2_6 = a2_6 & 248
    83 2138 60				dta b(w2_6 + znak_6 + w1_6)
    85 = 0061				a_7 = _S7*P1 / 100000
    86 = 0061				a2_7 = <a_7
    87 = 0000				a1_7 = >a_7
    91 = 0000					znak_7 = 0 
    93 = 0000				w1_7 = a1_7 & 3
    94 = 0060				w2_7 = a2_7 & 248
    95 2139 60				dta b(w2_7 + znak_7 + w1_7)
Source: ai.asm
    97 213A 00 00 00 00 00 00 + 	.he 0,0,0,0,0,0,0,0													;kierunek 8
    98 2142				MX -_S0*P1,-_S1*P1,-_S2*P1,-_S3*P1,-_S4*P1,-_S5*P1,-_S6*P1,-_S7*P1
Macro: AI.MX [Source: ai.asm]
     1 = FFFFFF9F			a_0 = -_S0*P1 / 100000
     2 = 009F				a2_0 = <a_0
     3 = 00FF				a1_0 = >a_0	
     5 = 0004					znak_0 = 4 
     9 = 0003				w1_0 = a1_0 & 3
    10 = 0098				w2_0 = a2_0 & 248
    11 2142 9F				dta b(w2_0 + znak_0 + w1_0)
    13 = FFFFFF9F			a_1 = -_S1*P1 / 100000
    14 = 009F				a2_1 = <a_1
    15 = 00FF				a1_1 = >a_1	
    17 = 0004					znak_1 = 4 
    21 = 0003				w1_1 = a1_1 & 3
    22 = 0098				w2_1 = a2_1 & 248
    23 2143 9F				dta b(w2_1 + znak_1 + w1_1)
    25 = FFFFFF9F			a_2 = -_S2*P1 / 100000
    26 = 009F				a2_2 = <a_2
    27 = 00FF				a1_2 = >a_2
    29 = 0004					znak_2 = 4 
    33 = 0003				w1_2 = a1_2 & 3
    34 = 0098				w2_2 = a2_2 & 248
    35 2144 9F				dta b(w2_2 + znak_2 + w1_2)
    37 = FFFFFF9F			a_3 = -_S3*P1 / 100000
    38 = 009F				a2_3 = <a_3
    39 = 00FF				a1_3 = >a_3
    41 = 0004					znak_3 = 4 
    45 = 0003				w1_3 = a1_3 & 3
    46 = 0098				w2_3 = a2_3 & 248
    47 2145 9F				dta b(w2_3 + znak_3 + w1_3)
    49 = FFFFFF9F			a_4 = -_S4*P1 / 100000
    50 = 009F				a2_4 = <a_4
    51 = 00FF				a1_4 = >a_4
    53 = 0004					znak_4 = 4 
    57 = 0003				w1_4 = a1_4 & 3
    58 = 0098				w2_4 = a2_4 & 248
    59 2146 9F				dta b(w2_4 + znak_4 + w1_4)
    61 = FFFFFF9F			a_5 = -_S5*P1 / 100000
    62 = 009F				a2_5 = <a_5
    63 = 00FF				a1_5 = >a_5
    65 = 0004					znak_5 = 4 
    69 = 0003				w1_5 = a1_5 & 3
    70 = 0098				w2_5 = a2_5 & 248
    71 2147 9F				dta b(w2_5 + znak_5 + w1_5)
    73 = FFFFFF9F			a_6 = -_S6*P1 / 100000
    74 = 009F				a2_6 = <a_6
    75 = 00FF				a1_6 = >a_6
    77 = 0004					znak_6 = 4 
    81 = 0003				w1_6 = a1_6 & 3
    82 = 0098				w2_6 = a2_6 & 248
    83 2148 9F				dta b(w2_6 + znak_6 + w1_6)
    85 = FFFFFF9F			a_7 = -_S7*P1 / 100000
    86 = 009F				a2_7 = <a_7
    87 = 00FF				a1_7 = >a_7
    89 = 0004					znak_7 = 4 
    93 = 0003				w1_7 = a1_7 & 3
    94 = 0098				w2_7 = a2_7 & 248
    95 2149 9F				dta b(w2_7 + znak_7 + w1_7)
Source: ai.asm
    99 214A				MX -_S0*P3,-_S1*P3,-_S2*P3,-_S3*P3,-_S4*P3,-_S5*P3,-_S6*P3,-_S7*P3
Macro: AI.MX [Source: ai.asm]
     1 = FFFFFF4B			a_0 = -_S0*P3 / 100000
     2 = 004B				a2_0 = <a_0
     3 = 00FF				a1_0 = >a_0	
     5 = 0004					znak_0 = 4 
     9 = 0003				w1_0 = a1_0 & 3
    10 = 0048				w2_0 = a2_0 & 248
    11 214A 4F				dta b(w2_0 + znak_0 + w1_0)
    13 = FFFFFF4B			a_1 = -_S1*P3 / 100000
    14 = 004B				a2_1 = <a_1
    15 = 00FF				a1_1 = >a_1	
    17 = 0004					znak_1 = 4 
    21 = 0003				w1_1 = a1_1 & 3
    22 = 0048				w2_1 = a2_1 & 248
    23 214B 4F				dta b(w2_1 + znak_1 + w1_1)
    25 = FFFFFF4B			a_2 = -_S2*P3 / 100000
    26 = 004B				a2_2 = <a_2
    27 = 00FF				a1_2 = >a_2
    29 = 0004					znak_2 = 4 
    33 = 0003				w1_2 = a1_2 & 3
    34 = 0048				w2_2 = a2_2 & 248
    35 214C 4F				dta b(w2_2 + znak_2 + w1_2)
    37 = FFFFFF4B			a_3 = -_S3*P3 / 100000
    38 = 004B				a2_3 = <a_3
    39 = 00FF				a1_3 = >a_3
    41 = 0004					znak_3 = 4 
    45 = 0003				w1_3 = a1_3 & 3
    46 = 0048				w2_3 = a2_3 & 248
    47 214D 4F				dta b(w2_3 + znak_3 + w1_3)
    49 = FFFFFF4B			a_4 = -_S4*P3 / 100000
    50 = 004B				a2_4 = <a_4
    51 = 00FF				a1_4 = >a_4
    53 = 0004					znak_4 = 4 
    57 = 0003				w1_4 = a1_4 & 3
    58 = 0048				w2_4 = a2_4 & 248
    59 214E 4F				dta b(w2_4 + znak_4 + w1_4)
    61 = FFFFFF4B			a_5 = -_S5*P3 / 100000
    62 = 004B				a2_5 = <a_5
    63 = 00FF				a1_5 = >a_5
    65 = 0004					znak_5 = 4 
    69 = 0003				w1_5 = a1_5 & 3
    70 = 0048				w2_5 = a2_5 & 248
    71 214F 4F				dta b(w2_5 + znak_5 + w1_5)
    73 = FFFFFF4B			a_6 = -_S6*P3 / 100000
    74 = 004B				a2_6 = <a_6
    75 = 00FF				a1_6 = >a_6
    77 = 0004					znak_6 = 4 
    81 = 0003				w1_6 = a1_6 & 3
    82 = 0048				w2_6 = a2_6 & 248
    83 2150 4F				dta b(w2_6 + znak_6 + w1_6)
    85 = FFFFFF4B			a_7 = -_S7*P3 / 100000
    86 = 004B				a2_7 = <a_7
    87 = 00FF				a1_7 = >a_7
    89 = 0004					znak_7 = 4 
    93 = 0003				w1_7 = a1_7 & 3
    94 = 0048				w2_7 = a2_7 & 248
    95 2151 4F				dta b(w2_7 + znak_7 + w1_7)
Source: ai.asm
   100 2152				MX -_S0*P2,-_S1*P2,-_S2*P2,-_S3*P2,-_S4*P2,-_S5*P2,-_S6*P2,-_S7*P2
Macro: AI.MX [Source: ai.asm]
     1 = FFFFFF14			a_0 = -_S0*P2 / 100000
     2 = 0014				a2_0 = <a_0
     3 = 00FF				a1_0 = >a_0	
     5 = 0004					znak_0 = 4 
     9 = 0003				w1_0 = a1_0 & 3
    10 = 0010				w2_0 = a2_0 & 248
    11 2152 17				dta b(w2_0 + znak_0 + w1_0)
    13 = FFFFFF14			a_1 = -_S1*P2 / 100000
    14 = 0014				a2_1 = <a_1
    15 = 00FF				a1_1 = >a_1	
    17 = 0004					znak_1 = 4 
    21 = 0003				w1_1 = a1_1 & 3
    22 = 0010				w2_1 = a2_1 & 248
    23 2153 17				dta b(w2_1 + znak_1 + w1_1)
    25 = FFFFFF14			a_2 = -_S2*P2 / 100000
    26 = 0014				a2_2 = <a_2
    27 = 00FF				a1_2 = >a_2
    29 = 0004					znak_2 = 4 
    33 = 0003				w1_2 = a1_2 & 3
    34 = 0010				w2_2 = a2_2 & 248
    35 2154 17				dta b(w2_2 + znak_2 + w1_2)
    37 = FFFFFF14			a_3 = -_S3*P2 / 100000
    38 = 0014				a2_3 = <a_3
    39 = 00FF				a1_3 = >a_3
    41 = 0004					znak_3 = 4 
    45 = 0003				w1_3 = a1_3 & 3
    46 = 0010				w2_3 = a2_3 & 248
    47 2155 17				dta b(w2_3 + znak_3 + w1_3)
    49 = FFFFFF14			a_4 = -_S4*P2 / 100000
    50 = 0014				a2_4 = <a_4
    51 = 00FF				a1_4 = >a_4
    53 = 0004					znak_4 = 4 
    57 = 0003				w1_4 = a1_4 & 3
    58 = 0010				w2_4 = a2_4 & 248
    59 2156 17				dta b(w2_4 + znak_4 + w1_4)
    61 = FFFFFF14			a_5 = -_S5*P2 / 100000
    62 = 0014				a2_5 = <a_5
    63 = 00FF				a1_5 = >a_5
    65 = 0004					znak_5 = 4 
    69 = 0003				w1_5 = a1_5 & 3
    70 = 0010				w2_5 = a2_5 & 248
    71 2157 17				dta b(w2_5 + znak_5 + w1_5)
    73 = FFFFFF14			a_6 = -_S6*P2 / 100000
    74 = 0014				a2_6 = <a_6
    75 = 00FF				a1_6 = >a_6
    77 = 0004					znak_6 = 4 
    81 = 0003				w1_6 = a1_6 & 3
    82 = 0010				w2_6 = a2_6 & 248
    83 2158 17				dta b(w2_6 + znak_6 + w1_6)
    85 = FFFFFF14			a_7 = -_S7*P2 / 100000
    86 = 0014				a2_7 = <a_7
    87 = 00FF				a1_7 = >a_7
    89 = 0004					znak_7 = 4 
    93 = 0003				w1_7 = a1_7 & 3
    94 = 0010				w2_7 = a2_7 & 248
    95 2159 17				dta b(w2_7 + znak_7 + w1_7)
Source: ai.asm
   101 215A				MX -_S0*P0,-_S1*P0,-_S2*P0,-_S3*P0,-_S4*P0,-_S5*P0,-_S6*P0,-_S7*P0	;kierunek 12
Macro: AI.MX [Source: ai.asm]
     1 = FFFFFF00			a_0 = -_S0*P0 / 100000
     2 = 0000				a2_0 = <a_0
     3 = 00FF				a1_0 = >a_0	
     5 = 0004					znak_0 = 4 
     9 = 0003				w1_0 = a1_0 & 3
    10 = 0000				w2_0 = a2_0 & 248
    11 215A 07				dta b(w2_0 + znak_0 + w1_0)
    13 = FFFFFF00			a_1 = -_S1*P0 / 100000
    14 = 0000				a2_1 = <a_1
    15 = 00FF				a1_1 = >a_1	
    17 = 0004					znak_1 = 4 
    21 = 0003				w1_1 = a1_1 & 3
    22 = 0000				w2_1 = a2_1 & 248
    23 215B 07				dta b(w2_1 + znak_1 + w1_1)
    25 = FFFFFF00			a_2 = -_S2*P0 / 100000
    26 = 0000				a2_2 = <a_2
    27 = 00FF				a1_2 = >a_2
    29 = 0004					znak_2 = 4 
    33 = 0003				w1_2 = a1_2 & 3
    34 = 0000				w2_2 = a2_2 & 248
    35 215C 07				dta b(w2_2 + znak_2 + w1_2)
    37 = FFFFFF00			a_3 = -_S3*P0 / 100000
    38 = 0000				a2_3 = <a_3
    39 = 00FF				a1_3 = >a_3
    41 = 0004					znak_3 = 4 
    45 = 0003				w1_3 = a1_3 & 3
    46 = 0000				w2_3 = a2_3 & 248
    47 215D 07				dta b(w2_3 + znak_3 + w1_3)
    49 = FFFFFF00			a_4 = -_S4*P0 / 100000
    50 = 0000				a2_4 = <a_4
    51 = 00FF				a1_4 = >a_4
    53 = 0004					znak_4 = 4 
    57 = 0003				w1_4 = a1_4 & 3
    58 = 0000				w2_4 = a2_4 & 248
    59 215E 07				dta b(w2_4 + znak_4 + w1_4)
    61 = FFFFFF00			a_5 = -_S5*P0 / 100000
    62 = 0000				a2_5 = <a_5
    63 = 00FF				a1_5 = >a_5
    65 = 0004					znak_5 = 4 
    69 = 0003				w1_5 = a1_5 & 3
    70 = 0000				w2_5 = a2_5 & 248
    71 215F 07				dta b(w2_5 + znak_5 + w1_5)
    73 = FFFFFF00			a_6 = -_S6*P0 / 100000
    74 = 0000				a2_6 = <a_6
    75 = 00FF				a1_6 = >a_6
    77 = 0004					znak_6 = 4 
    81 = 0003				w1_6 = a1_6 & 3
    82 = 0000				w2_6 = a2_6 & 248
    83 2160 07				dta b(w2_6 + znak_6 + w1_6)
    85 = FFFFFF00			a_7 = -_S7*P0 / 100000
    86 = 0000				a2_7 = <a_7
    87 = 00FF				a1_7 = >a_7
    89 = 0004					znak_7 = 4 
    93 = 0003				w1_7 = a1_7 & 3
    94 = 0000				w2_7 = a2_7 & 248
    95 2161 07				dta b(w2_7 + znak_7 + w1_7)
Source: ai.asm
   102 2162				MX -_S0*P2,-_S1*P2,-_S2*P2,-_S3*P2,-_S4*P2,-_S5*P2,-_S6*P2,-_S7*P2
Macro: AI.MX [Source: ai.asm]
     1 = FFFFFF14			a_0 = -_S0*P2 / 100000
     2 = 0014				a2_0 = <a_0
     3 = 00FF				a1_0 = >a_0	
     5 = 0004					znak_0 = 4 
     9 = 0003				w1_0 = a1_0 & 3
    10 = 0010				w2_0 = a2_0 & 248
    11 2162 17				dta b(w2_0 + znak_0 + w1_0)
    13 = FFFFFF14			a_1 = -_S1*P2 / 100000
    14 = 0014				a2_1 = <a_1
    15 = 00FF				a1_1 = >a_1	
    17 = 0004					znak_1 = 4 
    21 = 0003				w1_1 = a1_1 & 3
    22 = 0010				w2_1 = a2_1 & 248
    23 2163 17				dta b(w2_1 + znak_1 + w1_1)
    25 = FFFFFF14			a_2 = -_S2*P2 / 100000
    26 = 0014				a2_2 = <a_2
    27 = 00FF				a1_2 = >a_2
    29 = 0004					znak_2 = 4 
    33 = 0003				w1_2 = a1_2 & 3
    34 = 0010				w2_2 = a2_2 & 248
    35 2164 17				dta b(w2_2 + znak_2 + w1_2)
    37 = FFFFFF14			a_3 = -_S3*P2 / 100000
    38 = 0014				a2_3 = <a_3
    39 = 00FF				a1_3 = >a_3
    41 = 0004					znak_3 = 4 
    45 = 0003				w1_3 = a1_3 & 3
    46 = 0010				w2_3 = a2_3 & 248
    47 2165 17				dta b(w2_3 + znak_3 + w1_3)
    49 = FFFFFF14			a_4 = -_S4*P2 / 100000
    50 = 0014				a2_4 = <a_4
    51 = 00FF				a1_4 = >a_4
    53 = 0004					znak_4 = 4 
    57 = 0003				w1_4 = a1_4 & 3
    58 = 0010				w2_4 = a2_4 & 248
    59 2166 17				dta b(w2_4 + znak_4 + w1_4)
    61 = FFFFFF14			a_5 = -_S5*P2 / 100000
    62 = 0014				a2_5 = <a_5
    63 = 00FF				a1_5 = >a_5
    65 = 0004					znak_5 = 4 
    69 = 0003				w1_5 = a1_5 & 3
    70 = 0010				w2_5 = a2_5 & 248
    71 2167 17				dta b(w2_5 + znak_5 + w1_5)
    73 = FFFFFF14			a_6 = -_S6*P2 / 100000
    74 = 0014				a2_6 = <a_6
    75 = 00FF				a1_6 = >a_6
    77 = 0004					znak_6 = 4 
    81 = 0003				w1_6 = a1_6 & 3
    82 = 0010				w2_6 = a2_6 & 248
    83 2168 17				dta b(w2_6 + znak_6 + w1_6)
    85 = FFFFFF14			a_7 = -_S7*P2 / 100000
    86 = 0014				a2_7 = <a_7
    87 = 00FF				a1_7 = >a_7
    89 = 0004					znak_7 = 4 
    93 = 0003				w1_7 = a1_7 & 3
    94 = 0010				w2_7 = a2_7 & 248
    95 2169 17				dta b(w2_7 + znak_7 + w1_7)
Source: ai.asm
   103 216A				MX -_S0*P3,-_S1*P3,-_S2*P3,-_S3*P3,-_S4*P3,-_S5*P3,-_S6*P3,-_S7*P3
Macro: AI.MX [Source: ai.asm]
     1 = FFFFFF4B			a_0 = -_S0*P3 / 100000
     2 = 004B				a2_0 = <a_0
     3 = 00FF				a1_0 = >a_0	
     5 = 0004					znak_0 = 4 
     9 = 0003				w1_0 = a1_0 & 3
    10 = 0048				w2_0 = a2_0 & 248
    11 216A 4F				dta b(w2_0 + znak_0 + w1_0)
    13 = FFFFFF4B			a_1 = -_S1*P3 / 100000
    14 = 004B				a2_1 = <a_1
    15 = 00FF				a1_1 = >a_1	
    17 = 0004					znak_1 = 4 
    21 = 0003				w1_1 = a1_1 & 3
    22 = 0048				w2_1 = a2_1 & 248
    23 216B 4F				dta b(w2_1 + znak_1 + w1_1)
    25 = FFFFFF4B			a_2 = -_S2*P3 / 100000
    26 = 004B				a2_2 = <a_2
    27 = 00FF				a1_2 = >a_2
    29 = 0004					znak_2 = 4 
    33 = 0003				w1_2 = a1_2 & 3
    34 = 0048				w2_2 = a2_2 & 248
    35 216C 4F				dta b(w2_2 + znak_2 + w1_2)
    37 = FFFFFF4B			a_3 = -_S3*P3 / 100000
    38 = 004B				a2_3 = <a_3
    39 = 00FF				a1_3 = >a_3
    41 = 0004					znak_3 = 4 
    45 = 0003				w1_3 = a1_3 & 3
    46 = 0048				w2_3 = a2_3 & 248
    47 216D 4F				dta b(w2_3 + znak_3 + w1_3)
    49 = FFFFFF4B			a_4 = -_S4*P3 / 100000
    50 = 004B				a2_4 = <a_4
    51 = 00FF				a1_4 = >a_4
    53 = 0004					znak_4 = 4 
    57 = 0003				w1_4 = a1_4 & 3
    58 = 0048				w2_4 = a2_4 & 248
    59 216E 4F				dta b(w2_4 + znak_4 + w1_4)
    61 = FFFFFF4B			a_5 = -_S5*P3 / 100000
    62 = 004B				a2_5 = <a_5
    63 = 00FF				a1_5 = >a_5
    65 = 0004					znak_5 = 4 
    69 = 0003				w1_5 = a1_5 & 3
    70 = 0048				w2_5 = a2_5 & 248
    71 216F 4F				dta b(w2_5 + znak_5 + w1_5)
    73 = FFFFFF4B			a_6 = -_S6*P3 / 100000
    74 = 004B				a2_6 = <a_6
    75 = 00FF				a1_6 = >a_6
    77 = 0004					znak_6 = 4 
    81 = 0003				w1_6 = a1_6 & 3
    82 = 0048				w2_6 = a2_6 & 248
    83 2170 4F				dta b(w2_6 + znak_6 + w1_6)
    85 = FFFFFF4B			a_7 = -_S7*P3 / 100000
    86 = 004B				a2_7 = <a_7
    87 = 00FF				a1_7 = >a_7
    89 = 0004					znak_7 = 4 
    93 = 0003				w1_7 = a1_7 & 3
    94 = 0048				w2_7 = a2_7 & 248
    95 2171 4F				dta b(w2_7 + znak_7 + w1_7)
Source: ai.asm
   104 2172				MX -_S0*P1,-_S1*P1,-_S2*P1,-_S3*P1,-_S4*P1,-_S5*P1,-_S6*P1,-_S7*P1
Macro: AI.MX [Source: ai.asm]
     1 = FFFFFF9F			a_0 = -_S0*P1 / 100000
     2 = 009F				a2_0 = <a_0
     3 = 00FF				a1_0 = >a_0	
     5 = 0004					znak_0 = 4 
     9 = 0003				w1_0 = a1_0 & 3
    10 = 0098				w2_0 = a2_0 & 248
    11 2172 9F				dta b(w2_0 + znak_0 + w1_0)
    13 = FFFFFF9F			a_1 = -_S1*P1 / 100000
    14 = 009F				a2_1 = <a_1
    15 = 00FF				a1_1 = >a_1	
    17 = 0004					znak_1 = 4 
    21 = 0003				w1_1 = a1_1 & 3
    22 = 0098				w2_1 = a2_1 & 248
    23 2173 9F				dta b(w2_1 + znak_1 + w1_1)
    25 = FFFFFF9F			a_2 = -_S2*P1 / 100000
    26 = 009F				a2_2 = <a_2
    27 = 00FF				a1_2 = >a_2
    29 = 0004					znak_2 = 4 
    33 = 0003				w1_2 = a1_2 & 3
    34 = 0098				w2_2 = a2_2 & 248
    35 2174 9F				dta b(w2_2 + znak_2 + w1_2)
    37 = FFFFFF9F			a_3 = -_S3*P1 / 100000
    38 = 009F				a2_3 = <a_3
    39 = 00FF				a1_3 = >a_3
    41 = 0004					znak_3 = 4 
    45 = 0003				w1_3 = a1_3 & 3
    46 = 0098				w2_3 = a2_3 & 248
    47 2175 9F				dta b(w2_3 + znak_3 + w1_3)
    49 = FFFFFF9F			a_4 = -_S4*P1 / 100000
    50 = 009F				a2_4 = <a_4
    51 = 00FF				a1_4 = >a_4
    53 = 0004					znak_4 = 4 
    57 = 0003				w1_4 = a1_4 & 3
    58 = 0098				w2_4 = a2_4 & 248
    59 2176 9F				dta b(w2_4 + znak_4 + w1_4)
    61 = FFFFFF9F			a_5 = -_S5*P1 / 100000
    62 = 009F				a2_5 = <a_5
    63 = 00FF				a1_5 = >a_5
    65 = 0004					znak_5 = 4 
    69 = 0003				w1_5 = a1_5 & 3
    70 = 0098				w2_5 = a2_5 & 248
    71 2177 9F				dta b(w2_5 + znak_5 + w1_5)
    73 = FFFFFF9F			a_6 = -_S6*P1 / 100000
    74 = 009F				a2_6 = <a_6
    75 = 00FF				a1_6 = >a_6
    77 = 0004					znak_6 = 4 
    81 = 0003				w1_6 = a1_6 & 3
    82 = 0098				w2_6 = a2_6 & 248
    83 2178 9F				dta b(w2_6 + znak_6 + w1_6)
    85 = FFFFFF9F			a_7 = -_S7*P1 / 100000
    86 = 009F				a2_7 = <a_7
    87 = 00FF				a1_7 = >a_7
    89 = 0004					znak_7 = 4 
    93 = 0003				w1_7 = a1_7 & 3
    94 = 0098				w2_7 = a2_7 & 248
    95 2179 9F				dta b(w2_7 + znak_7 + w1_7)
Source: ai.asm
   105 					
   106 217A			tab_DY							;tablica przesuniecia Y 128b
   107 217A				MY -_S0*P0,-_S1*P0,-_S2*P0,-_S3*P0,-_S4*P0,-_S5*P0,-_S6*P0,-_S7*P0	;kierunek 0
Macro: AI.MY [Source: ai.asm]
     1 = FFFFFE00			a_0 = -_S0*P0 / 50000
     2 = 0000				a2_0 = <a_0
     3 = 00FE				a1_0 = >a_0
     5 = 0008					znak_0 = 8 
     9 = 0006				w1_0 = a1_0 & 7
    10 = 0000				w2_0 = a2_0 & 240
    11 217A 0E				dta b(w2_0 + znak_0 + w1_0)
    13 = FFFFFE00			a_1 = -_S1*P0 / 50000
    14 = 0000				a2_1 = <a_1
    15 = 00FE				a1_1 = >a_1
    17 = 0008					znak_1 = 8 
    21 = 0006				w1_1 = a1_1 & 7
    22 = 0000				w2_1 = a2_1 & 240
    23 217B 0E				dta b(w2_1 + znak_1 + w1_1)
    25 = FFFFFE00			a_2 = -_S2*P0 / 50000
    26 = 0000				a2_2 = <a_2
    27 = 00FE				a1_2 = >a_2
    29 = 0008					znak_2 = 8 
    33 = 0006				w1_2 = a1_2 & 7
    34 = 0000				w2_2 = a2_2 & 240
    35 217C 0E				dta b(w2_2 + znak_2 + w1_2)
    37 = FFFFFE00			a_3 = -_S3*P0 / 50000
    38 = 0000				a2_3 = <a_3
    39 = 00FE				a1_3 = >a_3
    41 = 0008					znak_3 = 8 
    45 = 0006				w1_3 = a1_3 & 7
    46 = 0000				w2_3 = a2_3 & 240
    47 217D 0E				dta b(w2_3 + znak_3 + w1_3)
    49 = FFFFFE00			a_4 = -_S4*P0 / 50000
    50 = 0000				a2_4 = <a_4
    51 = 00FE				a1_4 = >a_4
    53 = 0008					znak_4 = 8 
    57 = 0006				w1_4 = a1_4 & 7
    58 = 0000				w2_4 = a2_4 & 240
    59 217E 0E				dta b(w2_4 + znak_4 + w1_4)
    61 = FFFFFE00			a_5 = -_S5*P0 / 50000
    62 = 0000				a2_5 = <a_5
    63 = 00FE				a1_5 = >a_5
    65 = 0008					znak_5 = 8 
    69 = 0006				w1_5 = a1_5 & 7
    70 = 0000				w2_5 = a2_5 & 240
    71 217F 0E				dta b(w2_5 + znak_5 + w1_5)
    73 = FFFFFE00			a_6 = -_S6*P0 / 50000
    74 = 0000				a2_6 = <a_6
    75 = 00FE				a1_6 = >a_6
    77 = 0008					znak_6 = 8 
    81 = 0006				w1_6 = a1_6 & 7
    82 = 0000				w2_6 = a2_6 & 240
    83 2180 0E				dta b(w2_6 + znak_6 + w1_6)
    85 = FFFFFE00			a_7 = -_S7*P0 / 50000
    86 = 0000				a2_7 = <a_7
    87 = 00FE				a1_7 = >a_7
    89 = 0008					znak_7 = 8 
    93 = 0006				w1_7 = a1_7 & 7
    94 = 0000				w2_7 = a2_7 & 240
    95 2181 0E				dta b(w2_7 + znak_7 + w1_7)
Source: ai.asm
   108 2182				MY -_S0*P2,-_S1*P2,-_S2*P2,-_S3*P2,-_S4*P2,-_S5*P2,-_S6*P2,-_S7*P2
Macro: AI.MY [Source: ai.asm]
     1 = FFFFFE27			a_0 = -_S0*P2 / 50000
     2 = 0027				a2_0 = <a_0
     3 = 00FE				a1_0 = >a_0
     5 = 0008					znak_0 = 8 
     9 = 0006				w1_0 = a1_0 & 7
    10 = 0020				w2_0 = a2_0 & 240
    11 2182 2E				dta b(w2_0 + znak_0 + w1_0)
    13 = FFFFFE27			a_1 = -_S1*P2 / 50000
    14 = 0027				a2_1 = <a_1
    15 = 00FE				a1_1 = >a_1
    17 = 0008					znak_1 = 8 
    21 = 0006				w1_1 = a1_1 & 7
    22 = 0020				w2_1 = a2_1 & 240
    23 2183 2E				dta b(w2_1 + znak_1 + w1_1)
    25 = FFFFFE27			a_2 = -_S2*P2 / 50000
    26 = 0027				a2_2 = <a_2
    27 = 00FE				a1_2 = >a_2
    29 = 0008					znak_2 = 8 
    33 = 0006				w1_2 = a1_2 & 7
    34 = 0020				w2_2 = a2_2 & 240
    35 2184 2E				dta b(w2_2 + znak_2 + w1_2)
    37 = FFFFFE27			a_3 = -_S3*P2 / 50000
    38 = 0027				a2_3 = <a_3
    39 = 00FE				a1_3 = >a_3
    41 = 0008					znak_3 = 8 
    45 = 0006				w1_3 = a1_3 & 7
    46 = 0020				w2_3 = a2_3 & 240
    47 2185 2E				dta b(w2_3 + znak_3 + w1_3)
    49 = FFFFFE27			a_4 = -_S4*P2 / 50000
    50 = 0027				a2_4 = <a_4
    51 = 00FE				a1_4 = >a_4
    53 = 0008					znak_4 = 8 
    57 = 0006				w1_4 = a1_4 & 7
    58 = 0020				w2_4 = a2_4 & 240
    59 2186 2E				dta b(w2_4 + znak_4 + w1_4)
    61 = FFFFFE27			a_5 = -_S5*P2 / 50000
    62 = 0027				a2_5 = <a_5
    63 = 00FE				a1_5 = >a_5
    65 = 0008					znak_5 = 8 
    69 = 0006				w1_5 = a1_5 & 7
    70 = 0020				w2_5 = a2_5 & 240
    71 2187 2E				dta b(w2_5 + znak_5 + w1_5)
    73 = FFFFFE27			a_6 = -_S6*P2 / 50000
    74 = 0027				a2_6 = <a_6
    75 = 00FE				a1_6 = >a_6
    77 = 0008					znak_6 = 8 
    81 = 0006				w1_6 = a1_6 & 7
    82 = 0020				w2_6 = a2_6 & 240
    83 2188 2E				dta b(w2_6 + znak_6 + w1_6)
    85 = FFFFFE27			a_7 = -_S7*P2 / 50000
    86 = 0027				a2_7 = <a_7
    87 = 00FE				a1_7 = >a_7
    89 = 0008					znak_7 = 8 
    93 = 0006				w1_7 = a1_7 & 7
    94 = 0020				w2_7 = a2_7 & 240
    95 2189 2E				dta b(w2_7 + znak_7 + w1_7)
Source: ai.asm
   109 218A				MY -_S0*P3,-_S1*P3,-_S2*P3,-_S3*P3,-_S4*P3,-_S5*P3,-_S6*P3,-_S7*P3
Macro: AI.MY [Source: ai.asm]
     1 = FFFFFE96			a_0 = -_S0*P3 / 50000
     2 = 0096				a2_0 = <a_0
     3 = 00FE				a1_0 = >a_0
     5 = 0008					znak_0 = 8 
     9 = 0006				w1_0 = a1_0 & 7
    10 = 0090				w2_0 = a2_0 & 240
    11 218A 9E				dta b(w2_0 + znak_0 + w1_0)
    13 = FFFFFE96			a_1 = -_S1*P3 / 50000
    14 = 0096				a2_1 = <a_1
    15 = 00FE				a1_1 = >a_1
    17 = 0008					znak_1 = 8 
    21 = 0006				w1_1 = a1_1 & 7
    22 = 0090				w2_1 = a2_1 & 240
    23 218B 9E				dta b(w2_1 + znak_1 + w1_1)
    25 = FFFFFE96			a_2 = -_S2*P3 / 50000
    26 = 0096				a2_2 = <a_2
    27 = 00FE				a1_2 = >a_2
    29 = 0008					znak_2 = 8 
    33 = 0006				w1_2 = a1_2 & 7
    34 = 0090				w2_2 = a2_2 & 240
    35 218C 9E				dta b(w2_2 + znak_2 + w1_2)
    37 = FFFFFE96			a_3 = -_S3*P3 / 50000
    38 = 0096				a2_3 = <a_3
    39 = 00FE				a1_3 = >a_3
    41 = 0008					znak_3 = 8 
    45 = 0006				w1_3 = a1_3 & 7
    46 = 0090				w2_3 = a2_3 & 240
    47 218D 9E				dta b(w2_3 + znak_3 + w1_3)
    49 = FFFFFE96			a_4 = -_S4*P3 / 50000
    50 = 0096				a2_4 = <a_4
    51 = 00FE				a1_4 = >a_4
    53 = 0008					znak_4 = 8 
    57 = 0006				w1_4 = a1_4 & 7
    58 = 0090				w2_4 = a2_4 & 240
    59 218E 9E				dta b(w2_4 + znak_4 + w1_4)
    61 = FFFFFE96			a_5 = -_S5*P3 / 50000
    62 = 0096				a2_5 = <a_5
    63 = 00FE				a1_5 = >a_5
    65 = 0008					znak_5 = 8 
    69 = 0006				w1_5 = a1_5 & 7
    70 = 0090				w2_5 = a2_5 & 240
    71 218F 9E				dta b(w2_5 + znak_5 + w1_5)
    73 = FFFFFE96			a_6 = -_S6*P3 / 50000
    74 = 0096				a2_6 = <a_6
    75 = 00FE				a1_6 = >a_6
    77 = 0008					znak_6 = 8 
    81 = 0006				w1_6 = a1_6 & 7
    82 = 0090				w2_6 = a2_6 & 240
    83 2190 9E				dta b(w2_6 + znak_6 + w1_6)
    85 = FFFFFE96			a_7 = -_S7*P3 / 50000
    86 = 0096				a2_7 = <a_7
    87 = 00FE				a1_7 = >a_7
    89 = 0008					znak_7 = 8 
    93 = 0006				w1_7 = a1_7 & 7
    94 = 0090				w2_7 = a2_7 & 240
    95 2191 9E				dta b(w2_7 + znak_7 + w1_7)
Source: ai.asm
   110 2192				MY -_S0*P1,-_S1*P1,-_S2*P1,-_S3*P1,-_S4*P1,-_S5*P1,-_S6*P1,-_S7*P1
Macro: AI.MY [Source: ai.asm]
     1 = FFFFFF3D			a_0 = -_S0*P1 / 50000
     2 = 003D				a2_0 = <a_0
     3 = 00FF				a1_0 = >a_0
     5 = 0008					znak_0 = 8 
     9 = 0007				w1_0 = a1_0 & 7
    10 = 0030				w2_0 = a2_0 & 240
    11 2192 3F				dta b(w2_0 + znak_0 + w1_0)
    13 = FFFFFF3D			a_1 = -_S1*P1 / 50000
    14 = 003D				a2_1 = <a_1
    15 = 00FF				a1_1 = >a_1
    17 = 0008					znak_1 = 8 
    21 = 0007				w1_1 = a1_1 & 7
    22 = 0030				w2_1 = a2_1 & 240
    23 2193 3F				dta b(w2_1 + znak_1 + w1_1)
    25 = FFFFFF3D			a_2 = -_S2*P1 / 50000
    26 = 003D				a2_2 = <a_2
    27 = 00FF				a1_2 = >a_2
    29 = 0008					znak_2 = 8 
    33 = 0007				w1_2 = a1_2 & 7
    34 = 0030				w2_2 = a2_2 & 240
    35 2194 3F				dta b(w2_2 + znak_2 + w1_2)
    37 = FFFFFF3D			a_3 = -_S3*P1 / 50000
    38 = 003D				a2_3 = <a_3
    39 = 00FF				a1_3 = >a_3
    41 = 0008					znak_3 = 8 
    45 = 0007				w1_3 = a1_3 & 7
    46 = 0030				w2_3 = a2_3 & 240
    47 2195 3F				dta b(w2_3 + znak_3 + w1_3)
    49 = FFFFFF3D			a_4 = -_S4*P1 / 50000
    50 = 003D				a2_4 = <a_4
    51 = 00FF				a1_4 = >a_4
    53 = 0008					znak_4 = 8 
    57 = 0007				w1_4 = a1_4 & 7
    58 = 0030				w2_4 = a2_4 & 240
    59 2196 3F				dta b(w2_4 + znak_4 + w1_4)
    61 = FFFFFF3D			a_5 = -_S5*P1 / 50000
    62 = 003D				a2_5 = <a_5
    63 = 00FF				a1_5 = >a_5
    65 = 0008					znak_5 = 8 
    69 = 0007				w1_5 = a1_5 & 7
    70 = 0030				w2_5 = a2_5 & 240
    71 2197 3F				dta b(w2_5 + znak_5 + w1_5)
    73 = FFFFFF3D			a_6 = -_S6*P1 / 50000
    74 = 003D				a2_6 = <a_6
    75 = 00FF				a1_6 = >a_6
    77 = 0008					znak_6 = 8 
    81 = 0007				w1_6 = a1_6 & 7
    82 = 0030				w2_6 = a2_6 & 240
    83 2198 3F				dta b(w2_6 + znak_6 + w1_6)
    85 = FFFFFF3D			a_7 = -_S7*P1 / 50000
    86 = 003D				a2_7 = <a_7
    87 = 00FF				a1_7 = >a_7
    89 = 0008					znak_7 = 8 
    93 = 0007				w1_7 = a1_7 & 7
    94 = 0030				w2_7 = a2_7 & 240
    95 2199 3F				dta b(w2_7 + znak_7 + w1_7)
Source: ai.asm
   111 219A 00 00 00 00 00 00 + 	.he 0,0,0,0,0,0,0,0													;kierunek 4
   112 21A2				MY _S0*P1,_S1*P1,_S2*P1,_S3*P1,_S4*P1,_S5*P1,_S6*P1,_S7*P1
Macro: AI.MY [Source: ai.asm]
     1 = 00C3				a_0 = _S0*P1 / 50000
     2 = 00C3				a2_0 = <a_0
     3 = 0000				a1_0 = >a_0
     7 = 0000					znak_0 = 0 
     9 = 0000				w1_0 = a1_0 & 7
    10 = 00C0				w2_0 = a2_0 & 240
    11 21A2 C0				dta b(w2_0 + znak_0 + w1_0)
    13 = 00C3				a_1 = _S1*P1 / 50000
    14 = 00C3				a2_1 = <a_1
    15 = 0000				a1_1 = >a_1
    19 = 0000					znak_1 = 0 
    21 = 0000				w1_1 = a1_1 & 7
    22 = 00C0				w2_1 = a2_1 & 240
    23 21A3 C0				dta b(w2_1 + znak_1 + w1_1)
    25 = 00C3				a_2 = _S2*P1 / 50000
    26 = 00C3				a2_2 = <a_2
    27 = 0000				a1_2 = >a_2
    31 = 0000					znak_2 = 0 
    33 = 0000				w1_2 = a1_2 & 7
    34 = 00C0				w2_2 = a2_2 & 240
    35 21A4 C0				dta b(w2_2 + znak_2 + w1_2)
    37 = 00C3				a_3 = _S3*P1 / 50000
    38 = 00C3				a2_3 = <a_3
    39 = 0000				a1_3 = >a_3
    43 = 0000					znak_3 = 0 
    45 = 0000				w1_3 = a1_3 & 7
    46 = 00C0				w2_3 = a2_3 & 240
    47 21A5 C0				dta b(w2_3 + znak_3 + w1_3)
    49 = 00C3				a_4 = _S4*P1 / 50000
    50 = 00C3				a2_4 = <a_4
    51 = 0000				a1_4 = >a_4
    55 = 0000					znak_4 = 0 
    57 = 0000				w1_4 = a1_4 & 7
    58 = 00C0				w2_4 = a2_4 & 240
    59 21A6 C0				dta b(w2_4 + znak_4 + w1_4)
    61 = 00C3				a_5 = _S5*P1 / 50000
    62 = 00C3				a2_5 = <a_5
    63 = 0000				a1_5 = >a_5
    67 = 0000					znak_5 = 0 
    69 = 0000				w1_5 = a1_5 & 7
    70 = 00C0				w2_5 = a2_5 & 240
    71 21A7 C0				dta b(w2_5 + znak_5 + w1_5)
    73 = 00C3				a_6 = _S6*P1 / 50000
    74 = 00C3				a2_6 = <a_6
    75 = 0000				a1_6 = >a_6
    79 = 0000					znak_6 = 0 
    81 = 0000				w1_6 = a1_6 & 7
    82 = 00C0				w2_6 = a2_6 & 240
    83 21A8 C0				dta b(w2_6 + znak_6 + w1_6)
    85 = 00C3				a_7 = _S7*P1 / 50000
    86 = 00C3				a2_7 = <a_7
    87 = 0000				a1_7 = >a_7
    91 = 0000					znak_7 = 0 
    93 = 0000				w1_7 = a1_7 & 7
    94 = 00C0				w2_7 = a2_7 & 240
    95 21A9 C0				dta b(w2_7 + znak_7 + w1_7)
Source: ai.asm
   113 21AA				MY _S0*P3,_S1*P3,_S2*P3,_S3*P3,_S4*P3,_S5*P3,_S6*P3,_S7*P3
Macro: AI.MY [Source: ai.asm]
     1 = 016A				a_0 = _S0*P3 / 50000
     2 = 006A				a2_0 = <a_0
     3 = 0001				a1_0 = >a_0
     7 = 0000					znak_0 = 0 
     9 = 0001				w1_0 = a1_0 & 7
    10 = 0060				w2_0 = a2_0 & 240
    11 21AA 61				dta b(w2_0 + znak_0 + w1_0)
    13 = 016A				a_1 = _S1*P3 / 50000
    14 = 006A				a2_1 = <a_1
    15 = 0001				a1_1 = >a_1
    19 = 0000					znak_1 = 0 
    21 = 0001				w1_1 = a1_1 & 7
    22 = 0060				w2_1 = a2_1 & 240
    23 21AB 61				dta b(w2_1 + znak_1 + w1_1)
    25 = 016A				a_2 = _S2*P3 / 50000
    26 = 006A				a2_2 = <a_2
    27 = 0001				a1_2 = >a_2
    31 = 0000					znak_2 = 0 
    33 = 0001				w1_2 = a1_2 & 7
    34 = 0060				w2_2 = a2_2 & 240
    35 21AC 61				dta b(w2_2 + znak_2 + w1_2)
    37 = 016A				a_3 = _S3*P3 / 50000
    38 = 006A				a2_3 = <a_3
    39 = 0001				a1_3 = >a_3
    43 = 0000					znak_3 = 0 
    45 = 0001				w1_3 = a1_3 & 7
    46 = 0060				w2_3 = a2_3 & 240
    47 21AD 61				dta b(w2_3 + znak_3 + w1_3)
    49 = 016A				a_4 = _S4*P3 / 50000
    50 = 006A				a2_4 = <a_4
    51 = 0001				a1_4 = >a_4
    55 = 0000					znak_4 = 0 
    57 = 0001				w1_4 = a1_4 & 7
    58 = 0060				w2_4 = a2_4 & 240
    59 21AE 61				dta b(w2_4 + znak_4 + w1_4)
    61 = 016A				a_5 = _S5*P3 / 50000
    62 = 006A				a2_5 = <a_5
    63 = 0001				a1_5 = >a_5
    67 = 0000					znak_5 = 0 
    69 = 0001				w1_5 = a1_5 & 7
    70 = 0060				w2_5 = a2_5 & 240
    71 21AF 61				dta b(w2_5 + znak_5 + w1_5)
    73 = 016A				a_6 = _S6*P3 / 50000
    74 = 006A				a2_6 = <a_6
    75 = 0001				a1_6 = >a_6
    79 = 0000					znak_6 = 0 
    81 = 0001				w1_6 = a1_6 & 7
    82 = 0060				w2_6 = a2_6 & 240
    83 21B0 61				dta b(w2_6 + znak_6 + w1_6)
    85 = 016A				a_7 = _S7*P3 / 50000
    86 = 006A				a2_7 = <a_7
    87 = 0001				a1_7 = >a_7
    91 = 0000					znak_7 = 0 
    93 = 0001				w1_7 = a1_7 & 7
    94 = 0060				w2_7 = a2_7 & 240
    95 21B1 61				dta b(w2_7 + znak_7 + w1_7)
Source: ai.asm
   114 21B2				MY _S0*P2,_S1*P2,_S2*P2,_S3*P2,_S4*P2,_S5*P2,_S6*P2,_S7*P2
Macro: AI.MY [Source: ai.asm]
     1 = 01D9				a_0 = _S0*P2 / 50000
     2 = 00D9				a2_0 = <a_0
     3 = 0001				a1_0 = >a_0
     7 = 0000					znak_0 = 0 
     9 = 0001				w1_0 = a1_0 & 7
    10 = 00D0				w2_0 = a2_0 & 240
    11 21B2 D1				dta b(w2_0 + znak_0 + w1_0)
    13 = 01D9				a_1 = _S1*P2 / 50000
    14 = 00D9				a2_1 = <a_1
    15 = 0001				a1_1 = >a_1
    19 = 0000					znak_1 = 0 
    21 = 0001				w1_1 = a1_1 & 7
    22 = 00D0				w2_1 = a2_1 & 240
    23 21B3 D1				dta b(w2_1 + znak_1 + w1_1)
    25 = 01D9				a_2 = _S2*P2 / 50000
    26 = 00D9				a2_2 = <a_2
    27 = 0001				a1_2 = >a_2
    31 = 0000					znak_2 = 0 
    33 = 0001				w1_2 = a1_2 & 7
    34 = 00D0				w2_2 = a2_2 & 240
    35 21B4 D1				dta b(w2_2 + znak_2 + w1_2)
    37 = 01D9				a_3 = _S3*P2 / 50000
    38 = 00D9				a2_3 = <a_3
    39 = 0001				a1_3 = >a_3
    43 = 0000					znak_3 = 0 
    45 = 0001				w1_3 = a1_3 & 7
    46 = 00D0				w2_3 = a2_3 & 240
    47 21B5 D1				dta b(w2_3 + znak_3 + w1_3)
    49 = 01D9				a_4 = _S4*P2 / 50000
    50 = 00D9				a2_4 = <a_4
    51 = 0001				a1_4 = >a_4
    55 = 0000					znak_4 = 0 
    57 = 0001				w1_4 = a1_4 & 7
    58 = 00D0				w2_4 = a2_4 & 240
    59 21B6 D1				dta b(w2_4 + znak_4 + w1_4)
    61 = 01D9				a_5 = _S5*P2 / 50000
    62 = 00D9				a2_5 = <a_5
    63 = 0001				a1_5 = >a_5
    67 = 0000					znak_5 = 0 
    69 = 0001				w1_5 = a1_5 & 7
    70 = 00D0				w2_5 = a2_5 & 240
    71 21B7 D1				dta b(w2_5 + znak_5 + w1_5)
    73 = 01D9				a_6 = _S6*P2 / 50000
    74 = 00D9				a2_6 = <a_6
    75 = 0001				a1_6 = >a_6
    79 = 0000					znak_6 = 0 
    81 = 0001				w1_6 = a1_6 & 7
    82 = 00D0				w2_6 = a2_6 & 240
    83 21B8 D1				dta b(w2_6 + znak_6 + w1_6)
    85 = 01D9				a_7 = _S7*P2 / 50000
    86 = 00D9				a2_7 = <a_7
    87 = 0001				a1_7 = >a_7
    91 = 0000					znak_7 = 0 
    93 = 0001				w1_7 = a1_7 & 7
    94 = 00D0				w2_7 = a2_7 & 240
    95 21B9 D1				dta b(w2_7 + znak_7 + w1_7)
Source: ai.asm
   115 21BA				MY _S0*P0,_S1*P0,_S2*P0,_S3*P0,_S4*P0,_S5*P0,_S6*P0,_S7*P0			;kierunek 8
Macro: AI.MY [Source: ai.asm]
     1 = 0200				a_0 = _S0*P0 / 50000
     2 = 0000				a2_0 = <a_0
     3 = 0002				a1_0 = >a_0
     7 = 0000					znak_0 = 0 
     9 = 0002				w1_0 = a1_0 & 7
    10 = 0000				w2_0 = a2_0 & 240
    11 21BA 02				dta b(w2_0 + znak_0 + w1_0)
    13 = 0200				a_1 = _S1*P0 / 50000
    14 = 0000				a2_1 = <a_1
    15 = 0002				a1_1 = >a_1
    19 = 0000					znak_1 = 0 
    21 = 0002				w1_1 = a1_1 & 7
    22 = 0000				w2_1 = a2_1 & 240
    23 21BB 02				dta b(w2_1 + znak_1 + w1_1)
    25 = 0200				a_2 = _S2*P0 / 50000
    26 = 0000				a2_2 = <a_2
    27 = 0002				a1_2 = >a_2
    31 = 0000					znak_2 = 0 
    33 = 0002				w1_2 = a1_2 & 7
    34 = 0000				w2_2 = a2_2 & 240
    35 21BC 02				dta b(w2_2 + znak_2 + w1_2)
    37 = 0200				a_3 = _S3*P0 / 50000
    38 = 0000				a2_3 = <a_3
    39 = 0002				a1_3 = >a_3
    43 = 0000					znak_3 = 0 
    45 = 0002				w1_3 = a1_3 & 7
    46 = 0000				w2_3 = a2_3 & 240
    47 21BD 02				dta b(w2_3 + znak_3 + w1_3)
    49 = 0200				a_4 = _S4*P0 / 50000
    50 = 0000				a2_4 = <a_4
    51 = 0002				a1_4 = >a_4
    55 = 0000					znak_4 = 0 
    57 = 0002				w1_4 = a1_4 & 7
    58 = 0000				w2_4 = a2_4 & 240
    59 21BE 02				dta b(w2_4 + znak_4 + w1_4)
    61 = 0200				a_5 = _S5*P0 / 50000
    62 = 0000				a2_5 = <a_5
    63 = 0002				a1_5 = >a_5
    67 = 0000					znak_5 = 0 
    69 = 0002				w1_5 = a1_5 & 7
    70 = 0000				w2_5 = a2_5 & 240
    71 21BF 02				dta b(w2_5 + znak_5 + w1_5)
    73 = 0200				a_6 = _S6*P0 / 50000
    74 = 0000				a2_6 = <a_6
    75 = 0002				a1_6 = >a_6
    79 = 0000					znak_6 = 0 
    81 = 0002				w1_6 = a1_6 & 7
    82 = 0000				w2_6 = a2_6 & 240
    83 21C0 02				dta b(w2_6 + znak_6 + w1_6)
    85 = 0200				a_7 = _S7*P0 / 50000
    86 = 0000				a2_7 = <a_7
    87 = 0002				a1_7 = >a_7
    91 = 0000					znak_7 = 0 
    93 = 0002				w1_7 = a1_7 & 7
    94 = 0000				w2_7 = a2_7 & 240
    95 21C1 02				dta b(w2_7 + znak_7 + w1_7)
Source: ai.asm
   116 21C2				MY _S0*P2,_S1*P2,_S2*P2,_S3*P2,_S4*P2,_S5*P2,_S6*P2,_S7*P2
Macro: AI.MY [Source: ai.asm]
     1 = 01D9				a_0 = _S0*P2 / 50000
     2 = 00D9				a2_0 = <a_0
     3 = 0001				a1_0 = >a_0
     7 = 0000					znak_0 = 0 
     9 = 0001				w1_0 = a1_0 & 7
    10 = 00D0				w2_0 = a2_0 & 240
    11 21C2 D1				dta b(w2_0 + znak_0 + w1_0)
    13 = 01D9				a_1 = _S1*P2 / 50000
    14 = 00D9				a2_1 = <a_1
    15 = 0001				a1_1 = >a_1
    19 = 0000					znak_1 = 0 
    21 = 0001				w1_1 = a1_1 & 7
    22 = 00D0				w2_1 = a2_1 & 240
    23 21C3 D1				dta b(w2_1 + znak_1 + w1_1)
    25 = 01D9				a_2 = _S2*P2 / 50000
    26 = 00D9				a2_2 = <a_2
    27 = 0001				a1_2 = >a_2
    31 = 0000					znak_2 = 0 
    33 = 0001				w1_2 = a1_2 & 7
    34 = 00D0				w2_2 = a2_2 & 240
    35 21C4 D1				dta b(w2_2 + znak_2 + w1_2)
    37 = 01D9				a_3 = _S3*P2 / 50000
    38 = 00D9				a2_3 = <a_3
    39 = 0001				a1_3 = >a_3
    43 = 0000					znak_3 = 0 
    45 = 0001				w1_3 = a1_3 & 7
    46 = 00D0				w2_3 = a2_3 & 240
    47 21C5 D1				dta b(w2_3 + znak_3 + w1_3)
    49 = 01D9				a_4 = _S4*P2 / 50000
    50 = 00D9				a2_4 = <a_4
    51 = 0001				a1_4 = >a_4
    55 = 0000					znak_4 = 0 
    57 = 0001				w1_4 = a1_4 & 7
    58 = 00D0				w2_4 = a2_4 & 240
    59 21C6 D1				dta b(w2_4 + znak_4 + w1_4)
    61 = 01D9				a_5 = _S5*P2 / 50000
    62 = 00D9				a2_5 = <a_5
    63 = 0001				a1_5 = >a_5
    67 = 0000					znak_5 = 0 
    69 = 0001				w1_5 = a1_5 & 7
    70 = 00D0				w2_5 = a2_5 & 240
    71 21C7 D1				dta b(w2_5 + znak_5 + w1_5)
    73 = 01D9				a_6 = _S6*P2 / 50000
    74 = 00D9				a2_6 = <a_6
    75 = 0001				a1_6 = >a_6
    79 = 0000					znak_6 = 0 
    81 = 0001				w1_6 = a1_6 & 7
    82 = 00D0				w2_6 = a2_6 & 240
    83 21C8 D1				dta b(w2_6 + znak_6 + w1_6)
    85 = 01D9				a_7 = _S7*P2 / 50000
    86 = 00D9				a2_7 = <a_7
    87 = 0001				a1_7 = >a_7
    91 = 0000					znak_7 = 0 
    93 = 0001				w1_7 = a1_7 & 7
    94 = 00D0				w2_7 = a2_7 & 240
    95 21C9 D1				dta b(w2_7 + znak_7 + w1_7)
Source: ai.asm
   117 21CA				MY _S0*P3,_S1*P3,_S2*P3,_S3*P3,_S4*P3,_S5*P3,_S6*P3,_S7*P3
Macro: AI.MY [Source: ai.asm]
     1 = 016A				a_0 = _S0*P3 / 50000
     2 = 006A				a2_0 = <a_0
     3 = 0001				a1_0 = >a_0
     7 = 0000					znak_0 = 0 
     9 = 0001				w1_0 = a1_0 & 7
    10 = 0060				w2_0 = a2_0 & 240
    11 21CA 61				dta b(w2_0 + znak_0 + w1_0)
    13 = 016A				a_1 = _S1*P3 / 50000
    14 = 006A				a2_1 = <a_1
    15 = 0001				a1_1 = >a_1
    19 = 0000					znak_1 = 0 
    21 = 0001				w1_1 = a1_1 & 7
    22 = 0060				w2_1 = a2_1 & 240
    23 21CB 61				dta b(w2_1 + znak_1 + w1_1)
    25 = 016A				a_2 = _S2*P3 / 50000
    26 = 006A				a2_2 = <a_2
    27 = 0001				a1_2 = >a_2
    31 = 0000					znak_2 = 0 
    33 = 0001				w1_2 = a1_2 & 7
    34 = 0060				w2_2 = a2_2 & 240
    35 21CC 61				dta b(w2_2 + znak_2 + w1_2)
    37 = 016A				a_3 = _S3*P3 / 50000
    38 = 006A				a2_3 = <a_3
    39 = 0001				a1_3 = >a_3
    43 = 0000					znak_3 = 0 
    45 = 0001				w1_3 = a1_3 & 7
    46 = 0060				w2_3 = a2_3 & 240
    47 21CD 61				dta b(w2_3 + znak_3 + w1_3)
    49 = 016A				a_4 = _S4*P3 / 50000
    50 = 006A				a2_4 = <a_4
    51 = 0001				a1_4 = >a_4
    55 = 0000					znak_4 = 0 
    57 = 0001				w1_4 = a1_4 & 7
    58 = 0060				w2_4 = a2_4 & 240
    59 21CE 61				dta b(w2_4 + znak_4 + w1_4)
    61 = 016A				a_5 = _S5*P3 / 50000
    62 = 006A				a2_5 = <a_5
    63 = 0001				a1_5 = >a_5
    67 = 0000					znak_5 = 0 
    69 = 0001				w1_5 = a1_5 & 7
    70 = 0060				w2_5 = a2_5 & 240
    71 21CF 61				dta b(w2_5 + znak_5 + w1_5)
    73 = 016A				a_6 = _S6*P3 / 50000
    74 = 006A				a2_6 = <a_6
    75 = 0001				a1_6 = >a_6
    79 = 0000					znak_6 = 0 
    81 = 0001				w1_6 = a1_6 & 7
    82 = 0060				w2_6 = a2_6 & 240
    83 21D0 61				dta b(w2_6 + znak_6 + w1_6)
    85 = 016A				a_7 = _S7*P3 / 50000
    86 = 006A				a2_7 = <a_7
    87 = 0001				a1_7 = >a_7
    91 = 0000					znak_7 = 0 
    93 = 0001				w1_7 = a1_7 & 7
    94 = 0060				w2_7 = a2_7 & 240
    95 21D1 61				dta b(w2_7 + znak_7 + w1_7)
Source: ai.asm
   118 21D2				MY _S0*P1,_S1*P1,_S2*P1,_S3*P1,_S4*P1,_S5*P1,_S6*P1,_S7*P1
Macro: AI.MY [Source: ai.asm]
     1 = 00C3				a_0 = _S0*P1 / 50000
     2 = 00C3				a2_0 = <a_0
     3 = 0000				a1_0 = >a_0
     7 = 0000					znak_0 = 0 
     9 = 0000				w1_0 = a1_0 & 7
    10 = 00C0				w2_0 = a2_0 & 240
    11 21D2 C0				dta b(w2_0 + znak_0 + w1_0)
    13 = 00C3				a_1 = _S1*P1 / 50000
    14 = 00C3				a2_1 = <a_1
    15 = 0000				a1_1 = >a_1
    19 = 0000					znak_1 = 0 
    21 = 0000				w1_1 = a1_1 & 7
    22 = 00C0				w2_1 = a2_1 & 240
    23 21D3 C0				dta b(w2_1 + znak_1 + w1_1)
    25 = 00C3				a_2 = _S2*P1 / 50000
    26 = 00C3				a2_2 = <a_2
    27 = 0000				a1_2 = >a_2
    31 = 0000					znak_2 = 0 
    33 = 0000				w1_2 = a1_2 & 7
    34 = 00C0				w2_2 = a2_2 & 240
    35 21D4 C0				dta b(w2_2 + znak_2 + w1_2)
    37 = 00C3				a_3 = _S3*P1 / 50000
    38 = 00C3				a2_3 = <a_3
    39 = 0000				a1_3 = >a_3
    43 = 0000					znak_3 = 0 
    45 = 0000				w1_3 = a1_3 & 7
    46 = 00C0				w2_3 = a2_3 & 240
    47 21D5 C0				dta b(w2_3 + znak_3 + w1_3)
    49 = 00C3				a_4 = _S4*P1 / 50000
    50 = 00C3				a2_4 = <a_4
    51 = 0000				a1_4 = >a_4
    55 = 0000					znak_4 = 0 
    57 = 0000				w1_4 = a1_4 & 7
    58 = 00C0				w2_4 = a2_4 & 240
    59 21D6 C0				dta b(w2_4 + znak_4 + w1_4)
    61 = 00C3				a_5 = _S5*P1 / 50000
    62 = 00C3				a2_5 = <a_5
    63 = 0000				a1_5 = >a_5
    67 = 0000					znak_5 = 0 
    69 = 0000				w1_5 = a1_5 & 7
    70 = 00C0				w2_5 = a2_5 & 240
    71 21D7 C0				dta b(w2_5 + znak_5 + w1_5)
    73 = 00C3				a_6 = _S6*P1 / 50000
    74 = 00C3				a2_6 = <a_6
    75 = 0000				a1_6 = >a_6
    79 = 0000					znak_6 = 0 
    81 = 0000				w1_6 = a1_6 & 7
    82 = 00C0				w2_6 = a2_6 & 240
    83 21D8 C0				dta b(w2_6 + znak_6 + w1_6)
    85 = 00C3				a_7 = _S7*P1 / 50000
    86 = 00C3				a2_7 = <a_7
    87 = 0000				a1_7 = >a_7
    91 = 0000					znak_7 = 0 
    93 = 0000				w1_7 = a1_7 & 7
    94 = 00C0				w2_7 = a2_7 & 240
    95 21D9 C0				dta b(w2_7 + znak_7 + w1_7)
Source: ai.asm
   119 21DA 00 00 00 00 00 00 + 	.he 0,0,0,0,0,0,0,0													;kierunek 12
   120 21E2				MY -_S0*P1,-_S1*P1,-_S2*P1,-_S3*P1,-_S4*P1,-_S5*P1,-_S6*P1,-_S7*P1
Macro: AI.MY [Source: ai.asm]
     1 = FFFFFF3D			a_0 = -_S0*P1 / 50000
     2 = 003D				a2_0 = <a_0
     3 = 00FF				a1_0 = >a_0
     5 = 0008					znak_0 = 8 
     9 = 0007				w1_0 = a1_0 & 7
    10 = 0030				w2_0 = a2_0 & 240
    11 21E2 3F				dta b(w2_0 + znak_0 + w1_0)
    13 = FFFFFF3D			a_1 = -_S1*P1 / 50000
    14 = 003D				a2_1 = <a_1
    15 = 00FF				a1_1 = >a_1
    17 = 0008					znak_1 = 8 
    21 = 0007				w1_1 = a1_1 & 7
    22 = 0030				w2_1 = a2_1 & 240
    23 21E3 3F				dta b(w2_1 + znak_1 + w1_1)
    25 = FFFFFF3D			a_2 = -_S2*P1 / 50000
    26 = 003D				a2_2 = <a_2
    27 = 00FF				a1_2 = >a_2
    29 = 0008					znak_2 = 8 
    33 = 0007				w1_2 = a1_2 & 7
    34 = 0030				w2_2 = a2_2 & 240
    35 21E4 3F				dta b(w2_2 + znak_2 + w1_2)
    37 = FFFFFF3D			a_3 = -_S3*P1 / 50000
    38 = 003D				a2_3 = <a_3
    39 = 00FF				a1_3 = >a_3
    41 = 0008					znak_3 = 8 
    45 = 0007				w1_3 = a1_3 & 7
    46 = 0030				w2_3 = a2_3 & 240
    47 21E5 3F				dta b(w2_3 + znak_3 + w1_3)
    49 = FFFFFF3D			a_4 = -_S4*P1 / 50000
    50 = 003D				a2_4 = <a_4
    51 = 00FF				a1_4 = >a_4
    53 = 0008					znak_4 = 8 
    57 = 0007				w1_4 = a1_4 & 7
    58 = 0030				w2_4 = a2_4 & 240
    59 21E6 3F				dta b(w2_4 + znak_4 + w1_4)
    61 = FFFFFF3D			a_5 = -_S5*P1 / 50000
    62 = 003D				a2_5 = <a_5
    63 = 00FF				a1_5 = >a_5
    65 = 0008					znak_5 = 8 
    69 = 0007				w1_5 = a1_5 & 7
    70 = 0030				w2_5 = a2_5 & 240
    71 21E7 3F				dta b(w2_5 + znak_5 + w1_5)
    73 = FFFFFF3D			a_6 = -_S6*P1 / 50000
    74 = 003D				a2_6 = <a_6
    75 = 00FF				a1_6 = >a_6
    77 = 0008					znak_6 = 8 
    81 = 0007				w1_6 = a1_6 & 7
    82 = 0030				w2_6 = a2_6 & 240
    83 21E8 3F				dta b(w2_6 + znak_6 + w1_6)
    85 = FFFFFF3D			a_7 = -_S7*P1 / 50000
    86 = 003D				a2_7 = <a_7
    87 = 00FF				a1_7 = >a_7
    89 = 0008					znak_7 = 8 
    93 = 0007				w1_7 = a1_7 & 7
    94 = 0030				w2_7 = a2_7 & 240
    95 21E9 3F				dta b(w2_7 + znak_7 + w1_7)
Source: ai.asm
   121 21EA				MY -_S0*P3,-_S1*P3,-_S2*P3,-_S3*P3,-_S4*P3,-_S5*P3,-_S6*P3,-_S7*P3
Macro: AI.MY [Source: ai.asm]
     1 = FFFFFE96			a_0 = -_S0*P3 / 50000
     2 = 0096				a2_0 = <a_0
     3 = 00FE				a1_0 = >a_0
     5 = 0008					znak_0 = 8 
     9 = 0006				w1_0 = a1_0 & 7
    10 = 0090				w2_0 = a2_0 & 240
    11 21EA 9E				dta b(w2_0 + znak_0 + w1_0)
    13 = FFFFFE96			a_1 = -_S1*P3 / 50000
    14 = 0096				a2_1 = <a_1
    15 = 00FE				a1_1 = >a_1
    17 = 0008					znak_1 = 8 
    21 = 0006				w1_1 = a1_1 & 7
    22 = 0090				w2_1 = a2_1 & 240
    23 21EB 9E				dta b(w2_1 + znak_1 + w1_1)
    25 = FFFFFE96			a_2 = -_S2*P3 / 50000
    26 = 0096				a2_2 = <a_2
    27 = 00FE				a1_2 = >a_2
    29 = 0008					znak_2 = 8 
    33 = 0006				w1_2 = a1_2 & 7
    34 = 0090				w2_2 = a2_2 & 240
    35 21EC 9E				dta b(w2_2 + znak_2 + w1_2)
    37 = FFFFFE96			a_3 = -_S3*P3 / 50000
    38 = 0096				a2_3 = <a_3
    39 = 00FE				a1_3 = >a_3
    41 = 0008					znak_3 = 8 
    45 = 0006				w1_3 = a1_3 & 7
    46 = 0090				w2_3 = a2_3 & 240
    47 21ED 9E				dta b(w2_3 + znak_3 + w1_3)
    49 = FFFFFE96			a_4 = -_S4*P3 / 50000
    50 = 0096				a2_4 = <a_4
    51 = 00FE				a1_4 = >a_4
    53 = 0008					znak_4 = 8 
    57 = 0006				w1_4 = a1_4 & 7
    58 = 0090				w2_4 = a2_4 & 240
    59 21EE 9E				dta b(w2_4 + znak_4 + w1_4)
    61 = FFFFFE96			a_5 = -_S5*P3 / 50000
    62 = 0096				a2_5 = <a_5
    63 = 00FE				a1_5 = >a_5
    65 = 0008					znak_5 = 8 
    69 = 0006				w1_5 = a1_5 & 7
    70 = 0090				w2_5 = a2_5 & 240
    71 21EF 9E				dta b(w2_5 + znak_5 + w1_5)
    73 = FFFFFE96			a_6 = -_S6*P3 / 50000
    74 = 0096				a2_6 = <a_6
    75 = 00FE				a1_6 = >a_6
    77 = 0008					znak_6 = 8 
    81 = 0006				w1_6 = a1_6 & 7
    82 = 0090				w2_6 = a2_6 & 240
    83 21F0 9E				dta b(w2_6 + znak_6 + w1_6)
    85 = FFFFFE96			a_7 = -_S7*P3 / 50000
    86 = 0096				a2_7 = <a_7
    87 = 00FE				a1_7 = >a_7
    89 = 0008					znak_7 = 8 
    93 = 0006				w1_7 = a1_7 & 7
    94 = 0090				w2_7 = a2_7 & 240
    95 21F1 9E				dta b(w2_7 + znak_7 + w1_7)
Source: ai.asm
   122 21F2				MY -_S0*P2,-_S1*P2,-_S2*P2,-_S3*P2,-_S4*P2,-_S5*P2,-_S6*P2,-_S7*P2
Macro: AI.MY [Source: ai.asm]
     1 = FFFFFE27			a_0 = -_S0*P2 / 50000
     2 = 0027				a2_0 = <a_0
     3 = 00FE				a1_0 = >a_0
     5 = 0008					znak_0 = 8 
     9 = 0006				w1_0 = a1_0 & 7
    10 = 0020				w2_0 = a2_0 & 240
    11 21F2 2E				dta b(w2_0 + znak_0 + w1_0)
    13 = FFFFFE27			a_1 = -_S1*P2 / 50000
    14 = 0027				a2_1 = <a_1
    15 = 00FE				a1_1 = >a_1
    17 = 0008					znak_1 = 8 
    21 = 0006				w1_1 = a1_1 & 7
    22 = 0020				w2_1 = a2_1 & 240
    23 21F3 2E				dta b(w2_1 + znak_1 + w1_1)
    25 = FFFFFE27			a_2 = -_S2*P2 / 50000
    26 = 0027				a2_2 = <a_2
    27 = 00FE				a1_2 = >a_2
    29 = 0008					znak_2 = 8 
    33 = 0006				w1_2 = a1_2 & 7
    34 = 0020				w2_2 = a2_2 & 240
    35 21F4 2E				dta b(w2_2 + znak_2 + w1_2)
    37 = FFFFFE27			a_3 = -_S3*P2 / 50000
    38 = 0027				a2_3 = <a_3
    39 = 00FE				a1_3 = >a_3
    41 = 0008					znak_3 = 8 
    45 = 0006				w1_3 = a1_3 & 7
    46 = 0020				w2_3 = a2_3 & 240
    47 21F5 2E				dta b(w2_3 + znak_3 + w1_3)
    49 = FFFFFE27			a_4 = -_S4*P2 / 50000
    50 = 0027				a2_4 = <a_4
    51 = 00FE				a1_4 = >a_4
    53 = 0008					znak_4 = 8 
    57 = 0006				w1_4 = a1_4 & 7
    58 = 0020				w2_4 = a2_4 & 240
    59 21F6 2E				dta b(w2_4 + znak_4 + w1_4)
    61 = FFFFFE27			a_5 = -_S5*P2 / 50000
    62 = 0027				a2_5 = <a_5
    63 = 00FE				a1_5 = >a_5
    65 = 0008					znak_5 = 8 
    69 = 0006				w1_5 = a1_5 & 7
    70 = 0020				w2_5 = a2_5 & 240
    71 21F7 2E				dta b(w2_5 + znak_5 + w1_5)
    73 = FFFFFE27			a_6 = -_S6*P2 / 50000
    74 = 0027				a2_6 = <a_6
    75 = 00FE				a1_6 = >a_6
    77 = 0008					znak_6 = 8 
    81 = 0006				w1_6 = a1_6 & 7
    82 = 0020				w2_6 = a2_6 & 240
    83 21F8 2E				dta b(w2_6 + znak_6 + w1_6)
    85 = FFFFFE27			a_7 = -_S7*P2 / 50000
    86 = 0027				a2_7 = <a_7
    87 = 00FE				a1_7 = >a_7
    89 = 0008					znak_7 = 8 
    93 = 0006				w1_7 = a1_7 & 7
    94 = 0020				w2_7 = a2_7 & 240
    95 21F9 2E				dta b(w2_7 + znak_7 + w1_7)
Source: ai.asm
   123 					
   124 = 0186A0			P0=100000		;niweluje dzielenie
   125
   126 = 957C			P1=38268
   127 = 0168E3			P2=92387
   128 = 011436			P3=70710	
   129 = 0100			_S0=256		;speed0
   130 = 0100			_S1=256		;speed1
   131 = 0100			_S2=256		;speed2
   132 = 0100			_S3=256		;speed3
   133 = 0100			_S4=256		;speed4
   134 = 0100			_S5=256		;speed5
   135 = 0100			_S6=256		;speed6
   136 = 0100			_S7=256		;speed7
   137
   138
   139 				.macro MX value,value1,value2,value3,value4,value5,value6,value7
   140 					a_0 = :value / 100000
   141 					a2_0 = <a_0
   142 					a1_0 = >a_0	
   143 					.if (a1_0 & 128) 
   144 						znak_0 = 4 
   145 					.else 
   146 						znak_0 = 0 
   147 					.endif
   148 					w1_0 = a1_0 & 3
   149 					w2_0 = a2_0 & 248
   150 					dta b(w2_0 + znak_0 + w1_0)
   151 					
   152 					a_1 = :value1 / 100000
   153 					a2_1 = <a_1
   154 					a1_1 = >a_1	
   155 					.if (a1_1 & 128) 
   156 						znak_1 = 4 
   157 					.else 
   158 						znak_1 = 0 
   159 					.endif
   160 					w1_1 = a1_1 & 3
   161 					w2_1 = a2_1 & 248
   162 					dta b(w2_1 + znak_1 + w1_1)
   163 					
   164 					a_2 = :value2 / 100000
   165 					a2_2 = <a_2
   166 					a1_2 = >a_2
   167 					.if (a1_2 & 128) 
   168 						znak_2 = 4 
   169 					.else 
   170 						znak_2 = 0 
   171 					.endif
   172 					w1_2 = a1_2 & 3
   173 					w2_2 = a2_2 & 248
   174 					dta b(w2_2 + znak_2 + w1_2)
   175 					
   176 					a_3 = :value3 / 100000
   177 					a2_3 = <a_3
   178 					a1_3 = >a_3
   179 					.if (a1_3 & 128) 
   180 						znak_3 = 4 
   181 					.else 
   182 						znak_3 = 0 
   183 					.endif
   184 					w1_3 = a1_3 & 3
   185 					w2_3 = a2_3 & 248
   186 					dta b(w2_3 + znak_3 + w1_3)
   187 					
   188 					a_4 = :value4 / 100000
   189 					a2_4 = <a_4
   190 					a1_4 = >a_4
   191 					.if (a1_4 & 128) 
   192 						znak_4 = 4 
   193 					.else 
   194 						znak_4 = 0 
   195 					.endif
   196 					w1_4 = a1_4 & 3
   197 					w2_4 = a2_4 & 248
   198 					dta b(w2_4 + znak_4 + w1_4)
   199 					
   200 					a_5 = :value5 / 100000
   201 					a2_5 = <a_5
   202 					a1_5 = >a_5
   203 					.if (a1_5 & 128) 
   204 						znak_5 = 4 
   205 					.else 
   206 						znak_5 = 0 
   207 					.endif
   208 					w1_5 = a1_5 & 3
   209 					w2_5 = a2_5 & 248
   210 					dta b(w2_5 + znak_5 + w1_5)
   211 					
   212 					a_6 = :value6 / 100000
   213 					a2_6 = <a_6
   214 					a1_6 = >a_6
   215 					.if (a1_6 & 128) 
   216 						znak_6 = 4 
   217 					.else 
   218 						znak_6 = 0 
   219 					.endif
   220 					w1_6 = a1_6 & 3
   221 					w2_6 = a2_6 & 248
   222 					dta b(w2_6 + znak_6 + w1_6)
   223 					
   224 					a_7 = :value7 / 100000
   225 					a2_7 = <a_7
   226 					a1_7 = >a_7
   227 					.if (a1_7 & 128) 
   228 						znak_7 = 4 
   229 					.else 
   230 						znak_7 = 0 
   231 					.endif
   232 					w1_7 = a1_7 & 3
   233 					w2_7 = a2_7 & 248
   234 					dta b(w2_7 + znak_7 + w1_7)
   235 				.endm
   236
   237 				.macro MY value,value1,value2,value3,value4,value5,value6,value7
   238 					a_0 = :value / 50000
   239 					a2_0 = <a_0
   240 					a1_0 = >a_0
   241 					.if (a1_0 & 128) 
   242 						znak_0 = 8 
   243 					.else 
   244 						znak_0 = 0 
   245 					.endif
   246 					w1_0 = a1_0 & 7
   247 					w2_0 = a2_0 & 240
   248 					dta b(w2_0 + znak_0 + w1_0)
   249 					
   250 					a_1 = :value1 / 50000
   251 					a2_1 = <a_1
   252 					a1_1 = >a_1
   253 					.if (a1_1 & 128) 
   254 						znak_1 = 8 
   255 					.else 
   256 						znak_1 = 0 
   257 					.endif
   258 					w1_1 = a1_1 & 7
   259 					w2_1 = a2_1 & 240
   260 					dta b(w2_1 + znak_1 + w1_1)
   261 					
   262 					a_2 = :value2 / 50000
   263 					a2_2 = <a_2
   264 					a1_2 = >a_2
   265 					.if (a1_2 & 128) 
   266 						znak_2 = 8 
   267 					.else 
   268 						znak_2 = 0 
   269 					.endif
   270 					w1_2 = a1_2 & 7
   271 					w2_2 = a2_2 & 240
   272 					dta b(w2_2 + znak_2 + w1_2)
   273 					
   274 					a_3 = :value3 / 50000
   275 					a2_3 = <a_3
   276 					a1_3 = >a_3
   277 					.if (a1_3 & 128) 
   278 						znak_3 = 8 
   279 					.else 
   280 						znak_3 = 0 
   281 					.endif
   282 					w1_3 = a1_3 & 7
   283 					w2_3 = a2_3 & 240
   284 					dta b(w2_3 + znak_3 + w1_3)
   285 					
   286 					a_4 = :value4 / 50000
   287 					a2_4 = <a_4
   288 					a1_4 = >a_4
   289 					.if (a1_4 & 128) 
   290 						znak_4 = 8 
   291 					.else 
   292 						znak_4 = 0 
   293 					.endif
   294 					w1_4 = a1_4 & 7
   295 					w2_4 = a2_4 & 240
   296 					dta b(w2_4 + znak_4 + w1_4)
   297 					
   298 					a_5 = :value5 / 50000
   299 					a2_5 = <a_5
   300 					a1_5 = >a_5
   301 					.if (a1_5 & 128) 
   302 						znak_5 = 8 
   303 					.else 
   304 						znak_5 = 0 
   305 					.endif
   306 					w1_5 = a1_5 & 7
   307 					w2_5 = a2_5 & 240
   308 					dta b(w2_5 + znak_5 + w1_5)
   309 					
   310 					a_6 = :value6 / 50000
   311 					a2_6 = <a_6
   312 					a1_6 = >a_6
   313 					.if (a1_6 & 128) 
   314 						znak_6 = 8 
   315 					.else 
   316 						znak_6 = 0 
   317 					.endif
   318 					w1_6 = a1_6 & 7
   319 					w2_6 = a2_6 & 240
   320 					dta b(w2_6 + znak_6 + w1_6)
   321 					
   322 					a_7 = :value7 / 50000
   323 					a2_7 = <a_7
   324 					a1_7 = >a_7
   325 					.if (a1_7 & 128) 
   326 						znak_7 = 8 
   327 					.else 
   328 						znak_7 = 0 
   329 					.endif
   330 					w1_7 = a1_7 & 7
   331 					w2_7 = a2_7 & 240
   332 					dta b(w2_7 + znak_7 + w1_7)
   333 					
   334 				.endm
   335
   336
   337 				//DIR dla LINE				PHASE dla LINE    unit dla ARC
   338 				;		0						0				3	0
   339 				;	12		4				6		2			2	1
   340 				;		8						4
   341 				//speed 0-7,phase 0-7,frame 0-31 (*8),unit 0-3 (ćwiartki), dir for LINE 0-15, dir for ARC 0-1 1=>jak zegar
   342 21FA			path0
   343 21FA					MOVE	4
Macro: AI.MOVE [Source: ai.asm]
     1 21FA 04				dta b(4)
Source: ai.asm
   344 21FB					ARC		1,0,0
Macro: AI.ARC [Source: ai.asm]
     1 21FB 09				dta [1 & 1]+[0 & 3]*2+[0 & 15]*16+8
Source: ai.asm
   345 21FC					ARC		1,0,1
Macro: AI.ARC [Source: ai.asm]
     1 21FC 0B				dta [1 & 1]+[1 & 3]*2+[0 & 15]*16+8
Source: ai.asm
   346 21FD					ARC		1,0,2
Macro: AI.ARC [Source: ai.asm]
     1 21FD 0D				dta [1 & 1]+[2 & 3]*2+[0 & 15]*16+8
Source: ai.asm
   347 21FE					ARC		1,0,3
Macro: AI.ARC [Source: ai.asm]
     1 21FE 0F				dta [1 & 1]+[3 & 3]*2+[0 & 15]*16+8
Source: ai.asm
   348 21FF					ENDP
Macro: AI.ENDP [Source: ai.asm]
     1 21FF 00				dta 0
Source: ai.asm
   349
   350 2200					MOVE	6+4					;4 basic moves
Macro: AI.MOVE [Source: ai.asm]
     1 2200 0A				dta b(6+4)
Source: ai.asm
   351 2201					LINE	7,0,4,10
Macro: AI.LINE [Source: ai.asm]
     1 2201 74 50			dta [7 & 15]*16+[4 & 7],[10 & 31]*8+[0 & 7]
Source: ai.asm
   352 2203					ARC		1,0,2
Macro: AI.ARC [Source: ai.asm]
     1 2203 0D				dta [1 & 1]+[2 & 3]*2+[0 & 15]*16+8
Source: ai.asm
   353 2204					ARC 	1,0,3
Macro: AI.ARC [Source: ai.asm]
     1 2204 0F				dta [1 & 1]+[3 & 3]*2+[0 & 15]*16+8
Source: ai.asm
   354 2205					ARC		1,0,0
Macro: AI.ARC [Source: ai.asm]
     1 2205 09				dta [1 & 1]+[0 & 3]*2+[0 & 15]*16+8
Source: ai.asm
   355 2206					ARC		1,0,1
Macro: AI.ARC [Source: ai.asm]
     1 2206 0B				dta [1 & 1]+[1 & 3]*2+[0 & 15]*16+8
Source: ai.asm
   356 2207					ARC		1,0,2
Macro: AI.ARC [Source: ai.asm]
     1 2207 0D				dta [1 & 1]+[2 & 3]*2+[0 & 15]*16+8
Source: ai.asm
   357 2208					ARC		1,0,3
Macro: AI.ARC [Source: ai.asm]
     1 2208 0F				dta [1 & 1]+[3 & 3]*2+[0 & 15]*16+8
Source: ai.asm
   358 2209					ARC		1,0,0
Macro: AI.ARC [Source: ai.asm]
     1 2209 09				dta [1 & 1]+[0 & 3]*2+[0 & 15]*16+8
Source: ai.asm
   359 220A					ARC		1,0,2
Macro: AI.ARC [Source: ai.asm]
     1 220A 0D				dta [1 & 1]+[2 & 3]*2+[0 & 15]*16+8
Source: ai.asm
   360 220B					LINE	3,0,2,20
Macro: AI.LINE [Source: ai.asm]
     1 220B 32 A0			dta [3 & 15]*16+[2 & 7],[20 & 31]*8+[0 & 7]
Source: ai.asm
   361 220D					ENDP
Macro: AI.ENDP [Source: ai.asm]
     1 220D 00				dta 0
Source: ai.asm
   362 220E					ARC		0,0,0
Macro: AI.ARC [Source: ai.asm]
     1 220E 08				dta [0 & 1]+[0 & 3]*2+[0 & 15]*16+8
Source: ai.asm
   363 220F					LINE	1,1,0,10			;dir,speed,phase,frame
Macro: AI.LINE [Source: ai.asm]
     1 220F 10 51			dta [1 & 15]*16+[0 & 7],[10 & 31]*8+[1 & 7]
Source: ai.asm
   364 2211					LINE	1,2,0,2
Macro: AI.LINE [Source: ai.asm]
     1 2211 10 12			dta [1 & 15]*16+[0 & 7],[2 & 31]*8+[2 & 7]
Source: ai.asm
   365 2213					ARC		0,3,3				;dir,speed,unit
Macro: AI.ARC [Source: ai.asm]
     1 2213 3E				dta [0 & 1]+[3 & 3]*2+[3 & 15]*16+8
Source: ai.asm
   366 2214					ARC		1,1,2
Macro: AI.ARC [Source: ai.asm]
     1 2214 1D				dta [1 & 1]+[2 & 3]*2+[1 & 15]*16+8
Source: ai.asm
   367 2215					ENDP						;end path
Macro: AI.ENDP [Source: ai.asm]
     1 2215 00				dta 0
Source: ai.asm
   368
   369 				;dodaje ściężkę dla obiektu, A=nr ścieżki, X=nr obiektu
   370 2216			add_path
   371 2216 9D 8D 20				sta sprite_path_nr,x		;ustaw numer ścieżki	
   372 2219 A9 00				lda #0			;startowa wartość licznika
   373 221B 9D 95 20				sta sprite_path_licznik_rozkazow,x
   374 221E 9D 65 20				sta sprite_ruch,x			;brak ruchu na poczatku
   375 2221 A9 FF				lda #255
   376 2223 9D 9D 20				sta sprite_path_licznik,x	;zeruj zwykłe rozkazy
   377 2226 60					rts
   378 						
   379 						
   380 				;ruch po prostej		
   381 2227			ruch_prosta		
   382 2227 DE AD 20				dec sprite_ruch_ileRamek,x
   383 222A 10 03 4C 08 23			jmi next_cmd				;jeśli <0 to pobierz następny rozkaz
   384
   385 222F 18					clc
   386 2230 BD 55 20				lda sprite_DX,x
   387 2233 7D 75 20				adc sprite_ruch_DX,x
   388 2236 9D 55 20				sta sprite_DX,x
   389 2239 BD 00 20				lda sprite_X,x
   390 223C 7D 6D 20				adc sprite_ruch_X,x
   391 223F 9D 00 20				sta sprite_X,x
   392 						
   393 2242 18					clc
   394 2243 BD 5D 20				lda sprite_DY,x
   395 2246 7D 85 20				adc sprite_ruch_DY,x
   396 2249 9D 5D 20				sta sprite_DY,x
   397 224C BD 08 20				lda sprite_Y,x
   398 224F 7D 7D 20				adc sprite_ruch_Y,x
   399 2252 9D 08 20				sta sprite_Y,x
   400
   401 2255 4C F5 22				jmp _play
   402
   403 				;ruch po łuku		
   404 2258			ruch_luk
   405 2258 18					clc
   406 2259 BD AD 20				lda sprite_ruch_licznik,x
   407 225C 7D B5 20				adc sprite_ruch_zegar,x		;+/- 1  ; 1 lub 255
   408 225F DD A5 20				cmp sprite_ruch_end,x
   409 2262 D0 03 4C 08 23			jeq next_cmd
   410
   411 2267 9D AD 20				sta sprite_ruch_licznik,x
   412 226A A8					tay
   413 226B BD C5 20				lda sprite_ruch_adm,x
   414 226E 85 F2				sta pom
   415 2270 BD CD 20				lda sprite_ruch_ads,x
   416 2273 85 F3				sta pom+1
   417 2275 B1 F2				lda (pom),y
   418 2277 D0 03				bne @+
   419 2279 4C F5 22				jmp _play				;jeśli 0 to nie zmieniamy pozycji
   420 						
   421 227C 4A 4A 4A 4A		@		:4 lsr
   422 2280 85 F1				sta pom0
   423 2282 B1 F2				lda (pom),y
   424 2284 29 0F				and #%1111
   425 2286 85 F2				sta pom
   426 						
   427 2288 BC BD 20				ldy sprite_ruch_NRluku,x
   428 228B F0 1D				beq @+
   429 228D C0 01				cpy #1
   430 228F F0 2E				beq @+1
   431 2291 C0 02				cpy #2
   432 2293 F0 3F				beq @+2
   433 						
   434 2295 18					clc			;+x,-y ćwiartka 3
   435 2296 BD 00 20				lda sprite_X,x
   436 2299 65 F1				adc pom0
   437 229B 9D 00 20				sta sprite_X,x
   438 						
   439 229E 38					sec
   440 229F BD 08 20				lda sprite_Y,x
   441 22A2 E5 F2				sbc pom
   442 22A4 9D 08 20				sta sprite_Y,x
   443 						
   444 22A7 4C F5 22				jmp _play	
   445 						
   446 22AA 18			@		clc			;+x,+y  , ćwiartka=0
   447 22AB BD 00 20				lda sprite_X,x
   448 22AE 65 F1				adc pom0
   449 22B0 9D 00 20				sta sprite_X,x 
   450 						
   451 22B3 18					clc
   452 22B4 BD 08 20				lda sprite_Y,x
   453 22B7 65 F2				adc pom
   454 22B9 9D 08 20				sta sprite_Y,x
   455
   456 22BC 4C F5 22				jmp _play	
   457
   458 22BF 38			@		sec			;-x,+y ćwiartka 1
   459 22C0 BD 00 20				lda sprite_X,x
   460 22C3 E5 F1				sbc pom0
   461 22C5 9D 00 20				sta sprite_X,x
   462 						
   463 22C8 18					clc
   464 22C9 BD 08 20				lda sprite_Y,x
   465 22CC 65 F2				adc pom
   466 22CE 9D 08 20				sta sprite_Y,x
   467 						
   468 22D1 4C F5 22				jmp _play	
   469
   470 22D4 38			@		sec			;-x,-y ćwiartka 2, albo ćwiartka 0 w przeciwnym kierunku
   471 22D5 BD 00 20				lda sprite_X,x
   472 22D8 E5 F1				sbc pom0
   473 22DA 9D 00 20				sta sprite_X,x
   474 						
   475 22DD 38					sec
   476 22DE BD 08 20				lda sprite_Y,x
   477 22E1 E5 F2				sbc pom
   478 22E3 9D 08 20				sta sprite_Y,x
   479 						
   480 22E6 4C F5 22				jmp _play			
   481 						
   482 				;wykonaj ai dla wszystkich obiektow		
   483 22E9			play
   484 22E9 A2 07				ldx #MAX_SPRITES-1
   485 22EB BD 00 20		@		lda sprite_X,x
   486 22EE F0 05				beq _play
   487 22F0 BD 18 20				lda sprite_wybuch,x
   488 22F3 F0 04				beq @+
   489 22F5 CA			_play	dex
   490 22F6 D0 F3				bne @-
   491 22F8 60					rts
   492 						
   493 22F9 BD 65 20		@		lda sprite_ruch,x		;czy wykonywany jest jakis ruch?		
   494 22FC F0 0A				beq @+					
   495 22FE C9 01				cmp #1
   496 2300 D0 03 4C 27 22			jeq ruch_prosta
   497 2305 4C 58 22				jmp ruch_luk
   498
   499 				;brak ruchu, czyli pobierz nowy ze ścieżki
   500 2308			next_cmd
   501 2308 BC 8D 20		@		ldy sprite_path_nr,x
   502 230B B9 D5 20				lda path_ad_m,y
   503 230E 85 F2				sta pom
   504 2310 B9 D6 20				lda path_ad_s,y
   505 2313 85 F3				sta pom+1
   506 						
   507 2315 BC 9D 20				ldy sprite_path_licznik,x	;pobierz pozycję w ścieżce
   508 2318 BD 95 20				lda sprite_path_licznik_rozkazow,x	;ile wykonać zwykłych rozkazów
   509 231B D0 13				bne next_rozkaz				;trwaja zwykłe rozkazy
   510 						
   511 						
   512 231D C8					iny
   513 231E B1 F2				lda (pom),y
   514 2320 D0 06				bne @+
   515 				;=0 koniec scieżki
   516 2322 9D 00 20				sta sprite_X,x		;usun obiekt, koniec ścieżki
   517 2325 4C F5 22				jmp _play
   518 						
   519 2328 10 03 4C 17 24	@		jmi extra 			;extra funkcje
   520 232D 9D 95 20				sta sprite_path_licznik_rozkazow,x		;ilośc zwykłych ruchów
   521 2330			next_rozkaz		
   522 2330 DE 95 20				dec sprite_path_licznik_rozkazow,x		;od razu zmniejsz licznik bo jeden rozkaz pobierzemy
   523 						
   524 2333 C8					iny
   525 2334 B1 F2				lda (pom),y		;zwykły rozkaz, prosta czy łuk?
   526 2336 24 D0				bit bit3		;sprawdz bit3 =0 to prosta, =1 to łuk
   527 2338 D0 67				bne prepare_luk
   528 						
   529 				;przygotuj się do wykonania prostej
   530 233A 29 07				and #%111
   531 233C 85 F1				sta pom0
   532 233E BD 10 20				lda sprite_shape,x		;tylko jesli samolot!
   533 2341 29 F8				and #%11111000
   534 2343 05 F1				ora pom0
   535 2345 9D 10 20				sta sprite_shape,x
   536
   537 2348 B1 F2				lda (pom),y
   538 234A 29 F0				and #%11110000
   539 234C 4A					lsr
   540 234D 85 F1				sta pom0
   541 234F C8					iny	
   542
   543 2350 B1 F2				lda (pom),y
   544 2352 4A					lsr
   545 2353 29 7C				and #%01111100
   546 2355 9D AD 20				sta sprite_ruch_ileRamek,x		;ile ramek ma trwać ruch
   547 2358 98					tya
   548 2359 9D 9D 20				sta sprite_path_licznik,x		;zapamiętaj obecną pozycję w ścieżce
   549 												
   550 235C B1 F2				lda (pom),y
   551 235E 29 07				and #%111
   552 2360 05 F1				ora pom0
   553 2362 A8					tay							;indeks w tablicy przesunięcia X.DX,Y.DY zależnie od predkosci i kier
   554 						
   555 2363 B9 FA 20				lda tab_DX,y				;DX,DX,DX,DX,DX,ZNAK,X,X
   556 2366 24 D1				bit bit2				;sprawdz znak
   557 2368 D0 05				bne @+
   558 236A 29 03				and #%11				;plus
   559 236C 4C 73 23				jmp save_X
   560 236F 29 03		@		and #%11				;minus
   561 2371 49 FC				eor #%11111100		
   562 2373			save_X		
   563 2373 9D 6D 20				sta sprite_ruch_X,x
   564 						
   565 2376 B9 FA 20				lda tab_DX,y			;nie trzeba juz modyfikowac wedlug znaku
   566 2379 29 F8				and #%11111000
   567 237B 9D 75 20				sta sprite_ruch_DX,x
   568 						
   569 237E B9 7A 21				lda tab_DY,y			;DY,DY,DY,DY,ZNAK,Y,Y,DY  ; Y jest 2x wieksze od X
   570 2381 24 D0				bit bit3
   571 2383 D0 05				bne @+
   572 2385 29 07				and #%111
   573 2387 4C 8E 23				jmp save_Y
   574 238A 29 07		@		and #%111
   575 238C 49 F8				eor #%11111000
   576 238E			save_Y
   577 238E 9D 7D 20				sta sprite_ruch_Y,x
   578 						
   579 2391 B9 7A 21				lda tab_DY,y
   580 2394 29 F0				and #%11110000
   581 2396 9D 85 20				sta sprite_ruch_DY,x
   582 						
   583 2399 A9 01				lda #1
   584 239B 9D 65 20				sta sprite_ruch,x				;ustaw ruch po prostej
   585 239E 4C 27 22				jmp ruch_prosta
   586 						
   587 23A1			prepare_luk
   588 						;and #1
   589 						;bne *+4
   590 						;lda #255
   591 						;sta sprite_ruch_zegar,x			;zapamietaj kierunek ruchu =1 jak zegar, =255 przeciwnie
   592 						;lda (pom),y
   593 23A1 29 06				and #%00000110
   594 23A3 4A					lsr
   595 23A4 9D BD 20				sta sprite_ruch_NRluku,x			;zapamietaj numer luku
   596 						
   597 23A7 29 01				and #1
   598 23A9 8D B1 23				sta _pluk+1						;zmien kierunek dla 1 i 3 ćwiartki
   599 23AC B1 F2				lda (pom),y
   600 23AE 29 01				and #1
   601 23B0 49 FF		_pluk	eor #$ff
   602 23B2 D0 02				bne *+4
   603 23B4 A9 FF				lda #255
   604 23B6 9D B5 20				sta sprite_ruch_zegar,x			;zapamietaj kierunek ruchu =1 jak zegar, =255 przeciwnie
   605 						
   606 23B9 98					tya
   607 23BA 9D 9D 20				sta sprite_path_licznik,x
   608 23BD A9 02				lda #2
   609 23BF 9D 65 20				sta sprite_ruch,x			;ustaw ruch po łuku
   610 						
   611 23C2 B1 F2				lda (pom),y
   612 23C4 29 F0				and #%11110000
   613 23C6 4A 4A 4A				:3 lsr
   614 23C9 A8					tay
   615 23CA B9 D7 20				lda luk_tab,y
   616 23CD 85 F2				sta pom
   617 23CF 9D C5 20				sta sprite_ruch_adm,x
   618 23D2 B9 D8 20				lda luk_tab+1,y
   619 23D5 85 F3				sta pom+1
   620 23D7 9D CD 20				sta sprite_ruch_ads,x		;ustaw adres tablicy wybranego luku
   621 						
   622 23DA A0 00				ldy #0
   623 23DC B1 F2				lda (pom),y
   624 23DE BC B5 20				ldy sprite_ruch_zegar,x
   625 23E1 30 1A				bmi @+
   626 23E3 18					clc
   627 23E4 69 01				adc #1
   628 23E6 9D A5 20				sta sprite_ruch_end,x
   629 23E9 A9 00				lda #0
   630 23EB 9D AD 20				sta sprite_ruch_licznik,x
   631 						
   632 23EE BD BD 20				lda sprite_ruch_NRluku,x
   633 23F1 24 D2				bit bit0
   634 23F3 F0 1F				beq @+1
   635 23F5 49 02				eor #%10				;zmieniamy znaki dx i dy, tylko dla 1 i 3 ćwiartki
   636 23F7 9D BD 20				sta sprite_ruch_NRluku,x 
   637 						
   638 23FA 4C 58 22				jmp ruch_luk
   639 						
   640 23FD 18			@		clc
   641 23FE 69 01				adc #1
   642 2400 9D AD 20				sta sprite_ruch_licznik,x
   643 2403 A9 00				lda #0
   644 2405 9D A5 20				sta sprite_ruch_end,x
   645 2408 BD BD 20				lda sprite_ruch_NRluku,x
   646 240B 24 D2				bit bit0
   647 240D D0 05				bne @+
   648 240F 49 02				eor #%10				;zmieniamy znaki dx i dy, tylko dla 0 i 2 ćwiartki
   649 2411 9D BD 20				sta sprite_ruch_NRluku,x	
   650 						
   651 2414 4C 58 22		@		jmp ruch_luk
   652 						
   653 				;extra funkcje		
   654 2417			extra
   655 2417 4C F5 22				jmp _play
   656 						
   657
   658
   659
   660 				//MAKRA
   661 				;definije blok z podstawowymi ruchami
   662 				.macro MOVE ile
   663 					dta b(:ile)
   664 				.endm
   665 				;prosta kierunek,prędkość,faza animacji,ile ramek
   666 				.macro LINE dir,speed,phase,frame
   667 					dta [:dir & 15]*16+[:phase & 7],[:frame & 31]*8+[:speed & 7]
   668 				.endm
   669 				;łuk  kierunek,prędość,nr fragmentu łuku
   670 				.macro ARC dir,speed,unit
   671 					dta [:dir & 1]+[:unit & 3]*2+[:speed & 15]*16+8
   672 				.endm
   673
   674 				;koniec ścieżki
   675 				.macro ENDP 
   676 					dta 0
   677 				.endm
   678
   679 					
   680
   681 				.endl
